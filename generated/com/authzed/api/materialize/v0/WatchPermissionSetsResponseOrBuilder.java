// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: authzed/api/materialize/v0/watchpermissionsets.proto

package com.authzed.api.materialize.v0;

public interface WatchPermissionSetsResponseOrBuilder extends
    // @@protoc_insertion_point(interface_extends:authzed.api.materialize.v0.WatchPermissionSetsResponse)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * change is the permission set delta that has occurred as result of a mutation in origin SpiceDB.
   * The consumer should apply this change to the current state of the permission sets in their target system.
   * Once an event arrives with completed_revision instead, the consumer shall consider the set of
   * changes originating from that revision completed.
   * The consumer should keep track of the revision in order to resume streaming in the event of consumer restarts.
   * </pre>
   *
   * <code>.authzed.api.materialize.v0.PermissionSetChange change = 1 [json_name = "change"];</code>
   * @return Whether the change field is set.
   */
  boolean hasChange();
  /**
   * <pre>
   * change is the permission set delta that has occurred as result of a mutation in origin SpiceDB.
   * The consumer should apply this change to the current state of the permission sets in their target system.
   * Once an event arrives with completed_revision instead, the consumer shall consider the set of
   * changes originating from that revision completed.
   * The consumer should keep track of the revision in order to resume streaming in the event of consumer restarts.
   * </pre>
   *
   * <code>.authzed.api.materialize.v0.PermissionSetChange change = 1 [json_name = "change"];</code>
   * @return The change.
   */
  com.authzed.api.materialize.v0.PermissionSetChange getChange();
  /**
   * <pre>
   * change is the permission set delta that has occurred as result of a mutation in origin SpiceDB.
   * The consumer should apply this change to the current state of the permission sets in their target system.
   * Once an event arrives with completed_revision instead, the consumer shall consider the set of
   * changes originating from that revision completed.
   * The consumer should keep track of the revision in order to resume streaming in the event of consumer restarts.
   * </pre>
   *
   * <code>.authzed.api.materialize.v0.PermissionSetChange change = 1 [json_name = "change"];</code>
   */
  com.authzed.api.materialize.v0.PermissionSetChangeOrBuilder getChangeOrBuilder();

  /**
   * <pre>
   * completed_revision is the revision token that indicates the completion of a set of changes. It may also be
   * received without accompanying set of changes, indicating that a mutation in the origin SpiceDB cluster did
   * not yield any effective changes in the permission sets
   * </pre>
   *
   * <code>.authzed.api.v1.ZedToken completed_revision = 2 [json_name = "completedRevision"];</code>
   * @return Whether the completedRevision field is set.
   */
  boolean hasCompletedRevision();
  /**
   * <pre>
   * completed_revision is the revision token that indicates the completion of a set of changes. It may also be
   * received without accompanying set of changes, indicating that a mutation in the origin SpiceDB cluster did
   * not yield any effective changes in the permission sets
   * </pre>
   *
   * <code>.authzed.api.v1.ZedToken completed_revision = 2 [json_name = "completedRevision"];</code>
   * @return The completedRevision.
   */
  com.authzed.api.v1.ZedToken getCompletedRevision();
  /**
   * <pre>
   * completed_revision is the revision token that indicates the completion of a set of changes. It may also be
   * received without accompanying set of changes, indicating that a mutation in the origin SpiceDB cluster did
   * not yield any effective changes in the permission sets
   * </pre>
   *
   * <code>.authzed.api.v1.ZedToken completed_revision = 2 [json_name = "completedRevision"];</code>
   */
  com.authzed.api.v1.ZedTokenOrBuilder getCompletedRevisionOrBuilder();

  /**
   * <pre>
   * lookup_permission_sets_required is a signal that the consumer should perform a LookupPermissionSets call because
   * the permission set snapshot needs to be rebuilt from scratch. This typically happens when the origin SpiceDB
   * cluster has seen its schema changed.
   * </pre>
   *
   * <code>.authzed.api.materialize.v0.LookupPermissionSetsRequired lookup_permission_sets_required = 3 [json_name = "lookupPermissionSetsRequired"];</code>
   * @return Whether the lookupPermissionSetsRequired field is set.
   */
  boolean hasLookupPermissionSetsRequired();
  /**
   * <pre>
   * lookup_permission_sets_required is a signal that the consumer should perform a LookupPermissionSets call because
   * the permission set snapshot needs to be rebuilt from scratch. This typically happens when the origin SpiceDB
   * cluster has seen its schema changed.
   * </pre>
   *
   * <code>.authzed.api.materialize.v0.LookupPermissionSetsRequired lookup_permission_sets_required = 3 [json_name = "lookupPermissionSetsRequired"];</code>
   * @return The lookupPermissionSetsRequired.
   */
  com.authzed.api.materialize.v0.LookupPermissionSetsRequired getLookupPermissionSetsRequired();
  /**
   * <pre>
   * lookup_permission_sets_required is a signal that the consumer should perform a LookupPermissionSets call because
   * the permission set snapshot needs to be rebuilt from scratch. This typically happens when the origin SpiceDB
   * cluster has seen its schema changed.
   * </pre>
   *
   * <code>.authzed.api.materialize.v0.LookupPermissionSetsRequired lookup_permission_sets_required = 3 [json_name = "lookupPermissionSetsRequired"];</code>
   */
  com.authzed.api.materialize.v0.LookupPermissionSetsRequiredOrBuilder getLookupPermissionSetsRequiredOrBuilder();

  /**
   * <pre>
   * breaking_schema_change is a signal that a breaking schema change has been written to the origin SpiceDB cluster,
   * and that the consumer should expect delays in the ingestion of new changes,
   * because the permission set snapshot needs to be rebuilt from scratch. Once the snapshot is ready, the consumer
   * will receive a LookupPermissionSetsRequired event.
   * </pre>
   *
   * <code>.authzed.api.materialize.v0.BreakingSchemaChange breaking_schema_change = 4 [json_name = "breakingSchemaChange"];</code>
   * @return Whether the breakingSchemaChange field is set.
   */
  boolean hasBreakingSchemaChange();
  /**
   * <pre>
   * breaking_schema_change is a signal that a breaking schema change has been written to the origin SpiceDB cluster,
   * and that the consumer should expect delays in the ingestion of new changes,
   * because the permission set snapshot needs to be rebuilt from scratch. Once the snapshot is ready, the consumer
   * will receive a LookupPermissionSetsRequired event.
   * </pre>
   *
   * <code>.authzed.api.materialize.v0.BreakingSchemaChange breaking_schema_change = 4 [json_name = "breakingSchemaChange"];</code>
   * @return The breakingSchemaChange.
   */
  com.authzed.api.materialize.v0.BreakingSchemaChange getBreakingSchemaChange();
  /**
   * <pre>
   * breaking_schema_change is a signal that a breaking schema change has been written to the origin SpiceDB cluster,
   * and that the consumer should expect delays in the ingestion of new changes,
   * because the permission set snapshot needs to be rebuilt from scratch. Once the snapshot is ready, the consumer
   * will receive a LookupPermissionSetsRequired event.
   * </pre>
   *
   * <code>.authzed.api.materialize.v0.BreakingSchemaChange breaking_schema_change = 4 [json_name = "breakingSchemaChange"];</code>
   */
  com.authzed.api.materialize.v0.BreakingSchemaChangeOrBuilder getBreakingSchemaChangeOrBuilder();

  public com.authzed.api.materialize.v0.WatchPermissionSetsResponse.ResponseCase getResponseCase();
}
