// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: authzed/api/materialize/v0/watchpermissions.proto

package com.authzed.api.materialize.v0;

public interface WatchPermissionsResponseOrBuilder extends
    // @@protoc_insertion_point(interface_extends:authzed.api.materialize.v0.WatchPermissionsResponse)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * change is the computed permission delta that has occurred as result of a mutation in origin SpiceDB.
   * The consumer should apply this change to the current state of the computed permissions in their target system.
   * Once an event arrives with completed_revision instead, the consumer shall consider there are not more changes
   * originating from that revision.
   * The consumer should keep track of the revision in order to resume streaming in the event of consumer restarts.
   * </pre>
   *
   * <code>.authzed.api.materialize.v0.PermissionChange change = 1 [json_name = "change"];</code>
   * @return Whether the change field is set.
   */
  boolean hasChange();
  /**
   * <pre>
   * change is the computed permission delta that has occurred as result of a mutation in origin SpiceDB.
   * The consumer should apply this change to the current state of the computed permissions in their target system.
   * Once an event arrives with completed_revision instead, the consumer shall consider there are not more changes
   * originating from that revision.
   * The consumer should keep track of the revision in order to resume streaming in the event of consumer restarts.
   * </pre>
   *
   * <code>.authzed.api.materialize.v0.PermissionChange change = 1 [json_name = "change"];</code>
   * @return The change.
   */
  com.authzed.api.materialize.v0.PermissionChange getChange();
  /**
   * <pre>
   * change is the computed permission delta that has occurred as result of a mutation in origin SpiceDB.
   * The consumer should apply this change to the current state of the computed permissions in their target system.
   * Once an event arrives with completed_revision instead, the consumer shall consider there are not more changes
   * originating from that revision.
   * The consumer should keep track of the revision in order to resume streaming in the event of consumer restarts.
   * </pre>
   *
   * <code>.authzed.api.materialize.v0.PermissionChange change = 1 [json_name = "change"];</code>
   */
  com.authzed.api.materialize.v0.PermissionChangeOrBuilder getChangeOrBuilder();

  /**
   * <pre>
   * completed_revision is the revision token that indicates all changes originating from a revision have been
   * streamed and thus the revision should be considered completed. It may also be
   * received without accompanying set of changes, indicating that a mutation in the origin SpiceDB cluster did
   * not yield any effective changes in the computed permissions
   * </pre>
   *
   * <code>.authzed.api.v1.ZedToken completed_revision = 2 [json_name = "completedRevision"];</code>
   * @return Whether the completedRevision field is set.
   */
  boolean hasCompletedRevision();
  /**
   * <pre>
   * completed_revision is the revision token that indicates all changes originating from a revision have been
   * streamed and thus the revision should be considered completed. It may also be
   * received without accompanying set of changes, indicating that a mutation in the origin SpiceDB cluster did
   * not yield any effective changes in the computed permissions
   * </pre>
   *
   * <code>.authzed.api.v1.ZedToken completed_revision = 2 [json_name = "completedRevision"];</code>
   * @return The completedRevision.
   */
  com.authzed.api.v1.ZedToken getCompletedRevision();
  /**
   * <pre>
   * completed_revision is the revision token that indicates all changes originating from a revision have been
   * streamed and thus the revision should be considered completed. It may also be
   * received without accompanying set of changes, indicating that a mutation in the origin SpiceDB cluster did
   * not yield any effective changes in the computed permissions
   * </pre>
   *
   * <code>.authzed.api.v1.ZedToken completed_revision = 2 [json_name = "completedRevision"];</code>
   */
  com.authzed.api.v1.ZedTokenOrBuilder getCompletedRevisionOrBuilder();

  public com.authzed.api.materialize.v0.WatchPermissionsResponse.ResponseCase getResponseCase();
}
