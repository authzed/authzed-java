// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: authzed/api/materialize/v0/watchpermissionsets.proto

package com.authzed.api.materialize.v0;

/**
 * Protobuf type {@code authzed.api.materialize.v0.WatchPermissionSetsResponse}
 */
public final class WatchPermissionSetsResponse extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:authzed.api.materialize.v0.WatchPermissionSetsResponse)
    WatchPermissionSetsResponseOrBuilder {
private static final long serialVersionUID = 0L;
  // Use WatchPermissionSetsResponse.newBuilder() to construct.
  private WatchPermissionSetsResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private WatchPermissionSetsResponse() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new WatchPermissionSetsResponse();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.authzed.api.materialize.v0.Watchpermissionsets.internal_static_authzed_api_materialize_v0_WatchPermissionSetsResponse_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.authzed.api.materialize.v0.Watchpermissionsets.internal_static_authzed_api_materialize_v0_WatchPermissionSetsResponse_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.authzed.api.materialize.v0.WatchPermissionSetsResponse.class, com.authzed.api.materialize.v0.WatchPermissionSetsResponse.Builder.class);
  }

  private int responseCase_ = 0;
  private java.lang.Object response_;
  public enum ResponseCase
      implements com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    CHANGE(1),
    COMPLETED_REVISION(2),
    LOOKUP_PERMISSION_SETS_REQUIRED(3),
    BREAKING_SCHEMA_CHANGE(4),
    RESPONSE_NOT_SET(0);
    private final int value;
    private ResponseCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ResponseCase valueOf(int value) {
      return forNumber(value);
    }

    public static ResponseCase forNumber(int value) {
      switch (value) {
        case 1: return CHANGE;
        case 2: return COMPLETED_REVISION;
        case 3: return LOOKUP_PERMISSION_SETS_REQUIRED;
        case 4: return BREAKING_SCHEMA_CHANGE;
        case 0: return RESPONSE_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public ResponseCase
  getResponseCase() {
    return ResponseCase.forNumber(
        responseCase_);
  }

  public static final int CHANGE_FIELD_NUMBER = 1;
  /**
   * <pre>
   * change is the permission set delta that has occurred as result of a mutation in origin SpiceDB.
   * The consumer should apply this change to the current state of the permission sets in their target system.
   * Once an event arrives with completed_revision instead, the consumer shall consider the set of
   * changes originating from that revision completed.
   * The consumer should keep track of the revision in order to resume streaming in the event of consumer restarts.
   * </pre>
   *
   * <code>.authzed.api.materialize.v0.PermissionSetChange change = 1 [json_name = "change"];</code>
   * @return Whether the change field is set.
   */
  @java.lang.Override
  public boolean hasChange() {
    return responseCase_ == 1;
  }
  /**
   * <pre>
   * change is the permission set delta that has occurred as result of a mutation in origin SpiceDB.
   * The consumer should apply this change to the current state of the permission sets in their target system.
   * Once an event arrives with completed_revision instead, the consumer shall consider the set of
   * changes originating from that revision completed.
   * The consumer should keep track of the revision in order to resume streaming in the event of consumer restarts.
   * </pre>
   *
   * <code>.authzed.api.materialize.v0.PermissionSetChange change = 1 [json_name = "change"];</code>
   * @return The change.
   */
  @java.lang.Override
  public com.authzed.api.materialize.v0.PermissionSetChange getChange() {
    if (responseCase_ == 1) {
       return (com.authzed.api.materialize.v0.PermissionSetChange) response_;
    }
    return com.authzed.api.materialize.v0.PermissionSetChange.getDefaultInstance();
  }
  /**
   * <pre>
   * change is the permission set delta that has occurred as result of a mutation in origin SpiceDB.
   * The consumer should apply this change to the current state of the permission sets in their target system.
   * Once an event arrives with completed_revision instead, the consumer shall consider the set of
   * changes originating from that revision completed.
   * The consumer should keep track of the revision in order to resume streaming in the event of consumer restarts.
   * </pre>
   *
   * <code>.authzed.api.materialize.v0.PermissionSetChange change = 1 [json_name = "change"];</code>
   */
  @java.lang.Override
  public com.authzed.api.materialize.v0.PermissionSetChangeOrBuilder getChangeOrBuilder() {
    if (responseCase_ == 1) {
       return (com.authzed.api.materialize.v0.PermissionSetChange) response_;
    }
    return com.authzed.api.materialize.v0.PermissionSetChange.getDefaultInstance();
  }

  public static final int COMPLETED_REVISION_FIELD_NUMBER = 2;
  /**
   * <pre>
   * completed_revision is the revision token that indicates the completion of a set of changes. It may also be
   * received without accompanying set of changes, indicating that a mutation in the origin SpiceDB cluster did
   * not yield any effective changes in the permission sets
   * </pre>
   *
   * <code>.authzed.api.v1.ZedToken completed_revision = 2 [json_name = "completedRevision"];</code>
   * @return Whether the completedRevision field is set.
   */
  @java.lang.Override
  public boolean hasCompletedRevision() {
    return responseCase_ == 2;
  }
  /**
   * <pre>
   * completed_revision is the revision token that indicates the completion of a set of changes. It may also be
   * received without accompanying set of changes, indicating that a mutation in the origin SpiceDB cluster did
   * not yield any effective changes in the permission sets
   * </pre>
   *
   * <code>.authzed.api.v1.ZedToken completed_revision = 2 [json_name = "completedRevision"];</code>
   * @return The completedRevision.
   */
  @java.lang.Override
  public com.authzed.api.v1.ZedToken getCompletedRevision() {
    if (responseCase_ == 2) {
       return (com.authzed.api.v1.ZedToken) response_;
    }
    return com.authzed.api.v1.ZedToken.getDefaultInstance();
  }
  /**
   * <pre>
   * completed_revision is the revision token that indicates the completion of a set of changes. It may also be
   * received without accompanying set of changes, indicating that a mutation in the origin SpiceDB cluster did
   * not yield any effective changes in the permission sets
   * </pre>
   *
   * <code>.authzed.api.v1.ZedToken completed_revision = 2 [json_name = "completedRevision"];</code>
   */
  @java.lang.Override
  public com.authzed.api.v1.ZedTokenOrBuilder getCompletedRevisionOrBuilder() {
    if (responseCase_ == 2) {
       return (com.authzed.api.v1.ZedToken) response_;
    }
    return com.authzed.api.v1.ZedToken.getDefaultInstance();
  }

  public static final int LOOKUP_PERMISSION_SETS_REQUIRED_FIELD_NUMBER = 3;
  /**
   * <pre>
   * lookup_permission_sets_required is a signal that the consumer should perform a LookupPermissionSets call because
   * the permission set snapshot needs to be rebuilt from scratch. This typically happens when the origin SpiceDB
   * cluster has seen its schema changed.
   * </pre>
   *
   * <code>.authzed.api.materialize.v0.LookupPermissionSetsRequired lookup_permission_sets_required = 3 [json_name = "lookupPermissionSetsRequired"];</code>
   * @return Whether the lookupPermissionSetsRequired field is set.
   */
  @java.lang.Override
  public boolean hasLookupPermissionSetsRequired() {
    return responseCase_ == 3;
  }
  /**
   * <pre>
   * lookup_permission_sets_required is a signal that the consumer should perform a LookupPermissionSets call because
   * the permission set snapshot needs to be rebuilt from scratch. This typically happens when the origin SpiceDB
   * cluster has seen its schema changed.
   * </pre>
   *
   * <code>.authzed.api.materialize.v0.LookupPermissionSetsRequired lookup_permission_sets_required = 3 [json_name = "lookupPermissionSetsRequired"];</code>
   * @return The lookupPermissionSetsRequired.
   */
  @java.lang.Override
  public com.authzed.api.materialize.v0.LookupPermissionSetsRequired getLookupPermissionSetsRequired() {
    if (responseCase_ == 3) {
       return (com.authzed.api.materialize.v0.LookupPermissionSetsRequired) response_;
    }
    return com.authzed.api.materialize.v0.LookupPermissionSetsRequired.getDefaultInstance();
  }
  /**
   * <pre>
   * lookup_permission_sets_required is a signal that the consumer should perform a LookupPermissionSets call because
   * the permission set snapshot needs to be rebuilt from scratch. This typically happens when the origin SpiceDB
   * cluster has seen its schema changed.
   * </pre>
   *
   * <code>.authzed.api.materialize.v0.LookupPermissionSetsRequired lookup_permission_sets_required = 3 [json_name = "lookupPermissionSetsRequired"];</code>
   */
  @java.lang.Override
  public com.authzed.api.materialize.v0.LookupPermissionSetsRequiredOrBuilder getLookupPermissionSetsRequiredOrBuilder() {
    if (responseCase_ == 3) {
       return (com.authzed.api.materialize.v0.LookupPermissionSetsRequired) response_;
    }
    return com.authzed.api.materialize.v0.LookupPermissionSetsRequired.getDefaultInstance();
  }

  public static final int BREAKING_SCHEMA_CHANGE_FIELD_NUMBER = 4;
  /**
   * <pre>
   * breaking_schema_change is a signal that a breaking schema change has been written to the origin SpiceDB cluster,
   * and that the consumer should expect delays in the ingestion of new changes,
   * because the permission set snapshot needs to be rebuilt from scratch. Once the snapshot is ready, the consumer
   * will receive a LookupPermissionSetsRequired event.
   * </pre>
   *
   * <code>.authzed.api.materialize.v0.BreakingSchemaChange breaking_schema_change = 4 [json_name = "breakingSchemaChange"];</code>
   * @return Whether the breakingSchemaChange field is set.
   */
  @java.lang.Override
  public boolean hasBreakingSchemaChange() {
    return responseCase_ == 4;
  }
  /**
   * <pre>
   * breaking_schema_change is a signal that a breaking schema change has been written to the origin SpiceDB cluster,
   * and that the consumer should expect delays in the ingestion of new changes,
   * because the permission set snapshot needs to be rebuilt from scratch. Once the snapshot is ready, the consumer
   * will receive a LookupPermissionSetsRequired event.
   * </pre>
   *
   * <code>.authzed.api.materialize.v0.BreakingSchemaChange breaking_schema_change = 4 [json_name = "breakingSchemaChange"];</code>
   * @return The breakingSchemaChange.
   */
  @java.lang.Override
  public com.authzed.api.materialize.v0.BreakingSchemaChange getBreakingSchemaChange() {
    if (responseCase_ == 4) {
       return (com.authzed.api.materialize.v0.BreakingSchemaChange) response_;
    }
    return com.authzed.api.materialize.v0.BreakingSchemaChange.getDefaultInstance();
  }
  /**
   * <pre>
   * breaking_schema_change is a signal that a breaking schema change has been written to the origin SpiceDB cluster,
   * and that the consumer should expect delays in the ingestion of new changes,
   * because the permission set snapshot needs to be rebuilt from scratch. Once the snapshot is ready, the consumer
   * will receive a LookupPermissionSetsRequired event.
   * </pre>
   *
   * <code>.authzed.api.materialize.v0.BreakingSchemaChange breaking_schema_change = 4 [json_name = "breakingSchemaChange"];</code>
   */
  @java.lang.Override
  public com.authzed.api.materialize.v0.BreakingSchemaChangeOrBuilder getBreakingSchemaChangeOrBuilder() {
    if (responseCase_ == 4) {
       return (com.authzed.api.materialize.v0.BreakingSchemaChange) response_;
    }
    return com.authzed.api.materialize.v0.BreakingSchemaChange.getDefaultInstance();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (responseCase_ == 1) {
      output.writeMessage(1, (com.authzed.api.materialize.v0.PermissionSetChange) response_);
    }
    if (responseCase_ == 2) {
      output.writeMessage(2, (com.authzed.api.v1.ZedToken) response_);
    }
    if (responseCase_ == 3) {
      output.writeMessage(3, (com.authzed.api.materialize.v0.LookupPermissionSetsRequired) response_);
    }
    if (responseCase_ == 4) {
      output.writeMessage(4, (com.authzed.api.materialize.v0.BreakingSchemaChange) response_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (responseCase_ == 1) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, (com.authzed.api.materialize.v0.PermissionSetChange) response_);
    }
    if (responseCase_ == 2) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, (com.authzed.api.v1.ZedToken) response_);
    }
    if (responseCase_ == 3) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, (com.authzed.api.materialize.v0.LookupPermissionSetsRequired) response_);
    }
    if (responseCase_ == 4) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, (com.authzed.api.materialize.v0.BreakingSchemaChange) response_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.authzed.api.materialize.v0.WatchPermissionSetsResponse)) {
      return super.equals(obj);
    }
    com.authzed.api.materialize.v0.WatchPermissionSetsResponse other = (com.authzed.api.materialize.v0.WatchPermissionSetsResponse) obj;

    if (!getResponseCase().equals(other.getResponseCase())) return false;
    switch (responseCase_) {
      case 1:
        if (!getChange()
            .equals(other.getChange())) return false;
        break;
      case 2:
        if (!getCompletedRevision()
            .equals(other.getCompletedRevision())) return false;
        break;
      case 3:
        if (!getLookupPermissionSetsRequired()
            .equals(other.getLookupPermissionSetsRequired())) return false;
        break;
      case 4:
        if (!getBreakingSchemaChange()
            .equals(other.getBreakingSchemaChange())) return false;
        break;
      case 0:
      default:
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    switch (responseCase_) {
      case 1:
        hash = (37 * hash) + CHANGE_FIELD_NUMBER;
        hash = (53 * hash) + getChange().hashCode();
        break;
      case 2:
        hash = (37 * hash) + COMPLETED_REVISION_FIELD_NUMBER;
        hash = (53 * hash) + getCompletedRevision().hashCode();
        break;
      case 3:
        hash = (37 * hash) + LOOKUP_PERMISSION_SETS_REQUIRED_FIELD_NUMBER;
        hash = (53 * hash) + getLookupPermissionSetsRequired().hashCode();
        break;
      case 4:
        hash = (37 * hash) + BREAKING_SCHEMA_CHANGE_FIELD_NUMBER;
        hash = (53 * hash) + getBreakingSchemaChange().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.authzed.api.materialize.v0.WatchPermissionSetsResponse parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.authzed.api.materialize.v0.WatchPermissionSetsResponse parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.authzed.api.materialize.v0.WatchPermissionSetsResponse parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.authzed.api.materialize.v0.WatchPermissionSetsResponse parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.authzed.api.materialize.v0.WatchPermissionSetsResponse parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.authzed.api.materialize.v0.WatchPermissionSetsResponse parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.authzed.api.materialize.v0.WatchPermissionSetsResponse parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.authzed.api.materialize.v0.WatchPermissionSetsResponse parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.authzed.api.materialize.v0.WatchPermissionSetsResponse parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.authzed.api.materialize.v0.WatchPermissionSetsResponse parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.authzed.api.materialize.v0.WatchPermissionSetsResponse parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.authzed.api.materialize.v0.WatchPermissionSetsResponse parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.authzed.api.materialize.v0.WatchPermissionSetsResponse prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code authzed.api.materialize.v0.WatchPermissionSetsResponse}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:authzed.api.materialize.v0.WatchPermissionSetsResponse)
      com.authzed.api.materialize.v0.WatchPermissionSetsResponseOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.authzed.api.materialize.v0.Watchpermissionsets.internal_static_authzed_api_materialize_v0_WatchPermissionSetsResponse_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.authzed.api.materialize.v0.Watchpermissionsets.internal_static_authzed_api_materialize_v0_WatchPermissionSetsResponse_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.authzed.api.materialize.v0.WatchPermissionSetsResponse.class, com.authzed.api.materialize.v0.WatchPermissionSetsResponse.Builder.class);
    }

    // Construct using com.authzed.api.materialize.v0.WatchPermissionSetsResponse.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      if (changeBuilder_ != null) {
        changeBuilder_.clear();
      }
      if (completedRevisionBuilder_ != null) {
        completedRevisionBuilder_.clear();
      }
      if (lookupPermissionSetsRequiredBuilder_ != null) {
        lookupPermissionSetsRequiredBuilder_.clear();
      }
      if (breakingSchemaChangeBuilder_ != null) {
        breakingSchemaChangeBuilder_.clear();
      }
      responseCase_ = 0;
      response_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.authzed.api.materialize.v0.Watchpermissionsets.internal_static_authzed_api_materialize_v0_WatchPermissionSetsResponse_descriptor;
    }

    @java.lang.Override
    public com.authzed.api.materialize.v0.WatchPermissionSetsResponse getDefaultInstanceForType() {
      return com.authzed.api.materialize.v0.WatchPermissionSetsResponse.getDefaultInstance();
    }

    @java.lang.Override
    public com.authzed.api.materialize.v0.WatchPermissionSetsResponse build() {
      com.authzed.api.materialize.v0.WatchPermissionSetsResponse result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.authzed.api.materialize.v0.WatchPermissionSetsResponse buildPartial() {
      com.authzed.api.materialize.v0.WatchPermissionSetsResponse result = new com.authzed.api.materialize.v0.WatchPermissionSetsResponse(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      buildPartialOneofs(result);
      onBuilt();
      return result;
    }

    private void buildPartial0(com.authzed.api.materialize.v0.WatchPermissionSetsResponse result) {
      int from_bitField0_ = bitField0_;
    }

    private void buildPartialOneofs(com.authzed.api.materialize.v0.WatchPermissionSetsResponse result) {
      result.responseCase_ = responseCase_;
      result.response_ = this.response_;
      if (responseCase_ == 1 &&
          changeBuilder_ != null) {
        result.response_ = changeBuilder_.build();
      }
      if (responseCase_ == 2 &&
          completedRevisionBuilder_ != null) {
        result.response_ = completedRevisionBuilder_.build();
      }
      if (responseCase_ == 3 &&
          lookupPermissionSetsRequiredBuilder_ != null) {
        result.response_ = lookupPermissionSetsRequiredBuilder_.build();
      }
      if (responseCase_ == 4 &&
          breakingSchemaChangeBuilder_ != null) {
        result.response_ = breakingSchemaChangeBuilder_.build();
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.authzed.api.materialize.v0.WatchPermissionSetsResponse) {
        return mergeFrom((com.authzed.api.materialize.v0.WatchPermissionSetsResponse)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.authzed.api.materialize.v0.WatchPermissionSetsResponse other) {
      if (other == com.authzed.api.materialize.v0.WatchPermissionSetsResponse.getDefaultInstance()) return this;
      switch (other.getResponseCase()) {
        case CHANGE: {
          mergeChange(other.getChange());
          break;
        }
        case COMPLETED_REVISION: {
          mergeCompletedRevision(other.getCompletedRevision());
          break;
        }
        case LOOKUP_PERMISSION_SETS_REQUIRED: {
          mergeLookupPermissionSetsRequired(other.getLookupPermissionSetsRequired());
          break;
        }
        case BREAKING_SCHEMA_CHANGE: {
          mergeBreakingSchemaChange(other.getBreakingSchemaChange());
          break;
        }
        case RESPONSE_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getChangeFieldBuilder().getBuilder(),
                  extensionRegistry);
              responseCase_ = 1;
              break;
            } // case 10
            case 18: {
              input.readMessage(
                  getCompletedRevisionFieldBuilder().getBuilder(),
                  extensionRegistry);
              responseCase_ = 2;
              break;
            } // case 18
            case 26: {
              input.readMessage(
                  getLookupPermissionSetsRequiredFieldBuilder().getBuilder(),
                  extensionRegistry);
              responseCase_ = 3;
              break;
            } // case 26
            case 34: {
              input.readMessage(
                  getBreakingSchemaChangeFieldBuilder().getBuilder(),
                  extensionRegistry);
              responseCase_ = 4;
              break;
            } // case 34
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int responseCase_ = 0;
    private java.lang.Object response_;
    public ResponseCase
        getResponseCase() {
      return ResponseCase.forNumber(
          responseCase_);
    }

    public Builder clearResponse() {
      responseCase_ = 0;
      response_ = null;
      onChanged();
      return this;
    }

    private int bitField0_;

    private com.google.protobuf.SingleFieldBuilderV3<
        com.authzed.api.materialize.v0.PermissionSetChange, com.authzed.api.materialize.v0.PermissionSetChange.Builder, com.authzed.api.materialize.v0.PermissionSetChangeOrBuilder> changeBuilder_;
    /**
     * <pre>
     * change is the permission set delta that has occurred as result of a mutation in origin SpiceDB.
     * The consumer should apply this change to the current state of the permission sets in their target system.
     * Once an event arrives with completed_revision instead, the consumer shall consider the set of
     * changes originating from that revision completed.
     * The consumer should keep track of the revision in order to resume streaming in the event of consumer restarts.
     * </pre>
     *
     * <code>.authzed.api.materialize.v0.PermissionSetChange change = 1 [json_name = "change"];</code>
     * @return Whether the change field is set.
     */
    @java.lang.Override
    public boolean hasChange() {
      return responseCase_ == 1;
    }
    /**
     * <pre>
     * change is the permission set delta that has occurred as result of a mutation in origin SpiceDB.
     * The consumer should apply this change to the current state of the permission sets in their target system.
     * Once an event arrives with completed_revision instead, the consumer shall consider the set of
     * changes originating from that revision completed.
     * The consumer should keep track of the revision in order to resume streaming in the event of consumer restarts.
     * </pre>
     *
     * <code>.authzed.api.materialize.v0.PermissionSetChange change = 1 [json_name = "change"];</code>
     * @return The change.
     */
    @java.lang.Override
    public com.authzed.api.materialize.v0.PermissionSetChange getChange() {
      if (changeBuilder_ == null) {
        if (responseCase_ == 1) {
          return (com.authzed.api.materialize.v0.PermissionSetChange) response_;
        }
        return com.authzed.api.materialize.v0.PermissionSetChange.getDefaultInstance();
      } else {
        if (responseCase_ == 1) {
          return changeBuilder_.getMessage();
        }
        return com.authzed.api.materialize.v0.PermissionSetChange.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * change is the permission set delta that has occurred as result of a mutation in origin SpiceDB.
     * The consumer should apply this change to the current state of the permission sets in their target system.
     * Once an event arrives with completed_revision instead, the consumer shall consider the set of
     * changes originating from that revision completed.
     * The consumer should keep track of the revision in order to resume streaming in the event of consumer restarts.
     * </pre>
     *
     * <code>.authzed.api.materialize.v0.PermissionSetChange change = 1 [json_name = "change"];</code>
     */
    public Builder setChange(com.authzed.api.materialize.v0.PermissionSetChange value) {
      if (changeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        response_ = value;
        onChanged();
      } else {
        changeBuilder_.setMessage(value);
      }
      responseCase_ = 1;
      return this;
    }
    /**
     * <pre>
     * change is the permission set delta that has occurred as result of a mutation in origin SpiceDB.
     * The consumer should apply this change to the current state of the permission sets in their target system.
     * Once an event arrives with completed_revision instead, the consumer shall consider the set of
     * changes originating from that revision completed.
     * The consumer should keep track of the revision in order to resume streaming in the event of consumer restarts.
     * </pre>
     *
     * <code>.authzed.api.materialize.v0.PermissionSetChange change = 1 [json_name = "change"];</code>
     */
    public Builder setChange(
        com.authzed.api.materialize.v0.PermissionSetChange.Builder builderForValue) {
      if (changeBuilder_ == null) {
        response_ = builderForValue.build();
        onChanged();
      } else {
        changeBuilder_.setMessage(builderForValue.build());
      }
      responseCase_ = 1;
      return this;
    }
    /**
     * <pre>
     * change is the permission set delta that has occurred as result of a mutation in origin SpiceDB.
     * The consumer should apply this change to the current state of the permission sets in their target system.
     * Once an event arrives with completed_revision instead, the consumer shall consider the set of
     * changes originating from that revision completed.
     * The consumer should keep track of the revision in order to resume streaming in the event of consumer restarts.
     * </pre>
     *
     * <code>.authzed.api.materialize.v0.PermissionSetChange change = 1 [json_name = "change"];</code>
     */
    public Builder mergeChange(com.authzed.api.materialize.v0.PermissionSetChange value) {
      if (changeBuilder_ == null) {
        if (responseCase_ == 1 &&
            response_ != com.authzed.api.materialize.v0.PermissionSetChange.getDefaultInstance()) {
          response_ = com.authzed.api.materialize.v0.PermissionSetChange.newBuilder((com.authzed.api.materialize.v0.PermissionSetChange) response_)
              .mergeFrom(value).buildPartial();
        } else {
          response_ = value;
        }
        onChanged();
      } else {
        if (responseCase_ == 1) {
          changeBuilder_.mergeFrom(value);
        } else {
          changeBuilder_.setMessage(value);
        }
      }
      responseCase_ = 1;
      return this;
    }
    /**
     * <pre>
     * change is the permission set delta that has occurred as result of a mutation in origin SpiceDB.
     * The consumer should apply this change to the current state of the permission sets in their target system.
     * Once an event arrives with completed_revision instead, the consumer shall consider the set of
     * changes originating from that revision completed.
     * The consumer should keep track of the revision in order to resume streaming in the event of consumer restarts.
     * </pre>
     *
     * <code>.authzed.api.materialize.v0.PermissionSetChange change = 1 [json_name = "change"];</code>
     */
    public Builder clearChange() {
      if (changeBuilder_ == null) {
        if (responseCase_ == 1) {
          responseCase_ = 0;
          response_ = null;
          onChanged();
        }
      } else {
        if (responseCase_ == 1) {
          responseCase_ = 0;
          response_ = null;
        }
        changeBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * change is the permission set delta that has occurred as result of a mutation in origin SpiceDB.
     * The consumer should apply this change to the current state of the permission sets in their target system.
     * Once an event arrives with completed_revision instead, the consumer shall consider the set of
     * changes originating from that revision completed.
     * The consumer should keep track of the revision in order to resume streaming in the event of consumer restarts.
     * </pre>
     *
     * <code>.authzed.api.materialize.v0.PermissionSetChange change = 1 [json_name = "change"];</code>
     */
    public com.authzed.api.materialize.v0.PermissionSetChange.Builder getChangeBuilder() {
      return getChangeFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * change is the permission set delta that has occurred as result of a mutation in origin SpiceDB.
     * The consumer should apply this change to the current state of the permission sets in their target system.
     * Once an event arrives with completed_revision instead, the consumer shall consider the set of
     * changes originating from that revision completed.
     * The consumer should keep track of the revision in order to resume streaming in the event of consumer restarts.
     * </pre>
     *
     * <code>.authzed.api.materialize.v0.PermissionSetChange change = 1 [json_name = "change"];</code>
     */
    @java.lang.Override
    public com.authzed.api.materialize.v0.PermissionSetChangeOrBuilder getChangeOrBuilder() {
      if ((responseCase_ == 1) && (changeBuilder_ != null)) {
        return changeBuilder_.getMessageOrBuilder();
      } else {
        if (responseCase_ == 1) {
          return (com.authzed.api.materialize.v0.PermissionSetChange) response_;
        }
        return com.authzed.api.materialize.v0.PermissionSetChange.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * change is the permission set delta that has occurred as result of a mutation in origin SpiceDB.
     * The consumer should apply this change to the current state of the permission sets in their target system.
     * Once an event arrives with completed_revision instead, the consumer shall consider the set of
     * changes originating from that revision completed.
     * The consumer should keep track of the revision in order to resume streaming in the event of consumer restarts.
     * </pre>
     *
     * <code>.authzed.api.materialize.v0.PermissionSetChange change = 1 [json_name = "change"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.authzed.api.materialize.v0.PermissionSetChange, com.authzed.api.materialize.v0.PermissionSetChange.Builder, com.authzed.api.materialize.v0.PermissionSetChangeOrBuilder> 
        getChangeFieldBuilder() {
      if (changeBuilder_ == null) {
        if (!(responseCase_ == 1)) {
          response_ = com.authzed.api.materialize.v0.PermissionSetChange.getDefaultInstance();
        }
        changeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.authzed.api.materialize.v0.PermissionSetChange, com.authzed.api.materialize.v0.PermissionSetChange.Builder, com.authzed.api.materialize.v0.PermissionSetChangeOrBuilder>(
                (com.authzed.api.materialize.v0.PermissionSetChange) response_,
                getParentForChildren(),
                isClean());
        response_ = null;
      }
      responseCase_ = 1;
      onChanged();
      return changeBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.authzed.api.v1.ZedToken, com.authzed.api.v1.ZedToken.Builder, com.authzed.api.v1.ZedTokenOrBuilder> completedRevisionBuilder_;
    /**
     * <pre>
     * completed_revision is the revision token that indicates the completion of a set of changes. It may also be
     * received without accompanying set of changes, indicating that a mutation in the origin SpiceDB cluster did
     * not yield any effective changes in the permission sets
     * </pre>
     *
     * <code>.authzed.api.v1.ZedToken completed_revision = 2 [json_name = "completedRevision"];</code>
     * @return Whether the completedRevision field is set.
     */
    @java.lang.Override
    public boolean hasCompletedRevision() {
      return responseCase_ == 2;
    }
    /**
     * <pre>
     * completed_revision is the revision token that indicates the completion of a set of changes. It may also be
     * received without accompanying set of changes, indicating that a mutation in the origin SpiceDB cluster did
     * not yield any effective changes in the permission sets
     * </pre>
     *
     * <code>.authzed.api.v1.ZedToken completed_revision = 2 [json_name = "completedRevision"];</code>
     * @return The completedRevision.
     */
    @java.lang.Override
    public com.authzed.api.v1.ZedToken getCompletedRevision() {
      if (completedRevisionBuilder_ == null) {
        if (responseCase_ == 2) {
          return (com.authzed.api.v1.ZedToken) response_;
        }
        return com.authzed.api.v1.ZedToken.getDefaultInstance();
      } else {
        if (responseCase_ == 2) {
          return completedRevisionBuilder_.getMessage();
        }
        return com.authzed.api.v1.ZedToken.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * completed_revision is the revision token that indicates the completion of a set of changes. It may also be
     * received without accompanying set of changes, indicating that a mutation in the origin SpiceDB cluster did
     * not yield any effective changes in the permission sets
     * </pre>
     *
     * <code>.authzed.api.v1.ZedToken completed_revision = 2 [json_name = "completedRevision"];</code>
     */
    public Builder setCompletedRevision(com.authzed.api.v1.ZedToken value) {
      if (completedRevisionBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        response_ = value;
        onChanged();
      } else {
        completedRevisionBuilder_.setMessage(value);
      }
      responseCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * completed_revision is the revision token that indicates the completion of a set of changes. It may also be
     * received without accompanying set of changes, indicating that a mutation in the origin SpiceDB cluster did
     * not yield any effective changes in the permission sets
     * </pre>
     *
     * <code>.authzed.api.v1.ZedToken completed_revision = 2 [json_name = "completedRevision"];</code>
     */
    public Builder setCompletedRevision(
        com.authzed.api.v1.ZedToken.Builder builderForValue) {
      if (completedRevisionBuilder_ == null) {
        response_ = builderForValue.build();
        onChanged();
      } else {
        completedRevisionBuilder_.setMessage(builderForValue.build());
      }
      responseCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * completed_revision is the revision token that indicates the completion of a set of changes. It may also be
     * received without accompanying set of changes, indicating that a mutation in the origin SpiceDB cluster did
     * not yield any effective changes in the permission sets
     * </pre>
     *
     * <code>.authzed.api.v1.ZedToken completed_revision = 2 [json_name = "completedRevision"];</code>
     */
    public Builder mergeCompletedRevision(com.authzed.api.v1.ZedToken value) {
      if (completedRevisionBuilder_ == null) {
        if (responseCase_ == 2 &&
            response_ != com.authzed.api.v1.ZedToken.getDefaultInstance()) {
          response_ = com.authzed.api.v1.ZedToken.newBuilder((com.authzed.api.v1.ZedToken) response_)
              .mergeFrom(value).buildPartial();
        } else {
          response_ = value;
        }
        onChanged();
      } else {
        if (responseCase_ == 2) {
          completedRevisionBuilder_.mergeFrom(value);
        } else {
          completedRevisionBuilder_.setMessage(value);
        }
      }
      responseCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * completed_revision is the revision token that indicates the completion of a set of changes. It may also be
     * received without accompanying set of changes, indicating that a mutation in the origin SpiceDB cluster did
     * not yield any effective changes in the permission sets
     * </pre>
     *
     * <code>.authzed.api.v1.ZedToken completed_revision = 2 [json_name = "completedRevision"];</code>
     */
    public Builder clearCompletedRevision() {
      if (completedRevisionBuilder_ == null) {
        if (responseCase_ == 2) {
          responseCase_ = 0;
          response_ = null;
          onChanged();
        }
      } else {
        if (responseCase_ == 2) {
          responseCase_ = 0;
          response_ = null;
        }
        completedRevisionBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * completed_revision is the revision token that indicates the completion of a set of changes. It may also be
     * received without accompanying set of changes, indicating that a mutation in the origin SpiceDB cluster did
     * not yield any effective changes in the permission sets
     * </pre>
     *
     * <code>.authzed.api.v1.ZedToken completed_revision = 2 [json_name = "completedRevision"];</code>
     */
    public com.authzed.api.v1.ZedToken.Builder getCompletedRevisionBuilder() {
      return getCompletedRevisionFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * completed_revision is the revision token that indicates the completion of a set of changes. It may also be
     * received without accompanying set of changes, indicating that a mutation in the origin SpiceDB cluster did
     * not yield any effective changes in the permission sets
     * </pre>
     *
     * <code>.authzed.api.v1.ZedToken completed_revision = 2 [json_name = "completedRevision"];</code>
     */
    @java.lang.Override
    public com.authzed.api.v1.ZedTokenOrBuilder getCompletedRevisionOrBuilder() {
      if ((responseCase_ == 2) && (completedRevisionBuilder_ != null)) {
        return completedRevisionBuilder_.getMessageOrBuilder();
      } else {
        if (responseCase_ == 2) {
          return (com.authzed.api.v1.ZedToken) response_;
        }
        return com.authzed.api.v1.ZedToken.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * completed_revision is the revision token that indicates the completion of a set of changes. It may also be
     * received without accompanying set of changes, indicating that a mutation in the origin SpiceDB cluster did
     * not yield any effective changes in the permission sets
     * </pre>
     *
     * <code>.authzed.api.v1.ZedToken completed_revision = 2 [json_name = "completedRevision"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.authzed.api.v1.ZedToken, com.authzed.api.v1.ZedToken.Builder, com.authzed.api.v1.ZedTokenOrBuilder> 
        getCompletedRevisionFieldBuilder() {
      if (completedRevisionBuilder_ == null) {
        if (!(responseCase_ == 2)) {
          response_ = com.authzed.api.v1.ZedToken.getDefaultInstance();
        }
        completedRevisionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.authzed.api.v1.ZedToken, com.authzed.api.v1.ZedToken.Builder, com.authzed.api.v1.ZedTokenOrBuilder>(
                (com.authzed.api.v1.ZedToken) response_,
                getParentForChildren(),
                isClean());
        response_ = null;
      }
      responseCase_ = 2;
      onChanged();
      return completedRevisionBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.authzed.api.materialize.v0.LookupPermissionSetsRequired, com.authzed.api.materialize.v0.LookupPermissionSetsRequired.Builder, com.authzed.api.materialize.v0.LookupPermissionSetsRequiredOrBuilder> lookupPermissionSetsRequiredBuilder_;
    /**
     * <pre>
     * lookup_permission_sets_required is a signal that the consumer should perform a LookupPermissionSets call because
     * the permission set snapshot needs to be rebuilt from scratch. This typically happens when the origin SpiceDB
     * cluster has seen its schema changed.
     * </pre>
     *
     * <code>.authzed.api.materialize.v0.LookupPermissionSetsRequired lookup_permission_sets_required = 3 [json_name = "lookupPermissionSetsRequired"];</code>
     * @return Whether the lookupPermissionSetsRequired field is set.
     */
    @java.lang.Override
    public boolean hasLookupPermissionSetsRequired() {
      return responseCase_ == 3;
    }
    /**
     * <pre>
     * lookup_permission_sets_required is a signal that the consumer should perform a LookupPermissionSets call because
     * the permission set snapshot needs to be rebuilt from scratch. This typically happens when the origin SpiceDB
     * cluster has seen its schema changed.
     * </pre>
     *
     * <code>.authzed.api.materialize.v0.LookupPermissionSetsRequired lookup_permission_sets_required = 3 [json_name = "lookupPermissionSetsRequired"];</code>
     * @return The lookupPermissionSetsRequired.
     */
    @java.lang.Override
    public com.authzed.api.materialize.v0.LookupPermissionSetsRequired getLookupPermissionSetsRequired() {
      if (lookupPermissionSetsRequiredBuilder_ == null) {
        if (responseCase_ == 3) {
          return (com.authzed.api.materialize.v0.LookupPermissionSetsRequired) response_;
        }
        return com.authzed.api.materialize.v0.LookupPermissionSetsRequired.getDefaultInstance();
      } else {
        if (responseCase_ == 3) {
          return lookupPermissionSetsRequiredBuilder_.getMessage();
        }
        return com.authzed.api.materialize.v0.LookupPermissionSetsRequired.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * lookup_permission_sets_required is a signal that the consumer should perform a LookupPermissionSets call because
     * the permission set snapshot needs to be rebuilt from scratch. This typically happens when the origin SpiceDB
     * cluster has seen its schema changed.
     * </pre>
     *
     * <code>.authzed.api.materialize.v0.LookupPermissionSetsRequired lookup_permission_sets_required = 3 [json_name = "lookupPermissionSetsRequired"];</code>
     */
    public Builder setLookupPermissionSetsRequired(com.authzed.api.materialize.v0.LookupPermissionSetsRequired value) {
      if (lookupPermissionSetsRequiredBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        response_ = value;
        onChanged();
      } else {
        lookupPermissionSetsRequiredBuilder_.setMessage(value);
      }
      responseCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * lookup_permission_sets_required is a signal that the consumer should perform a LookupPermissionSets call because
     * the permission set snapshot needs to be rebuilt from scratch. This typically happens when the origin SpiceDB
     * cluster has seen its schema changed.
     * </pre>
     *
     * <code>.authzed.api.materialize.v0.LookupPermissionSetsRequired lookup_permission_sets_required = 3 [json_name = "lookupPermissionSetsRequired"];</code>
     */
    public Builder setLookupPermissionSetsRequired(
        com.authzed.api.materialize.v0.LookupPermissionSetsRequired.Builder builderForValue) {
      if (lookupPermissionSetsRequiredBuilder_ == null) {
        response_ = builderForValue.build();
        onChanged();
      } else {
        lookupPermissionSetsRequiredBuilder_.setMessage(builderForValue.build());
      }
      responseCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * lookup_permission_sets_required is a signal that the consumer should perform a LookupPermissionSets call because
     * the permission set snapshot needs to be rebuilt from scratch. This typically happens when the origin SpiceDB
     * cluster has seen its schema changed.
     * </pre>
     *
     * <code>.authzed.api.materialize.v0.LookupPermissionSetsRequired lookup_permission_sets_required = 3 [json_name = "lookupPermissionSetsRequired"];</code>
     */
    public Builder mergeLookupPermissionSetsRequired(com.authzed.api.materialize.v0.LookupPermissionSetsRequired value) {
      if (lookupPermissionSetsRequiredBuilder_ == null) {
        if (responseCase_ == 3 &&
            response_ != com.authzed.api.materialize.v0.LookupPermissionSetsRequired.getDefaultInstance()) {
          response_ = com.authzed.api.materialize.v0.LookupPermissionSetsRequired.newBuilder((com.authzed.api.materialize.v0.LookupPermissionSetsRequired) response_)
              .mergeFrom(value).buildPartial();
        } else {
          response_ = value;
        }
        onChanged();
      } else {
        if (responseCase_ == 3) {
          lookupPermissionSetsRequiredBuilder_.mergeFrom(value);
        } else {
          lookupPermissionSetsRequiredBuilder_.setMessage(value);
        }
      }
      responseCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * lookup_permission_sets_required is a signal that the consumer should perform a LookupPermissionSets call because
     * the permission set snapshot needs to be rebuilt from scratch. This typically happens when the origin SpiceDB
     * cluster has seen its schema changed.
     * </pre>
     *
     * <code>.authzed.api.materialize.v0.LookupPermissionSetsRequired lookup_permission_sets_required = 3 [json_name = "lookupPermissionSetsRequired"];</code>
     */
    public Builder clearLookupPermissionSetsRequired() {
      if (lookupPermissionSetsRequiredBuilder_ == null) {
        if (responseCase_ == 3) {
          responseCase_ = 0;
          response_ = null;
          onChanged();
        }
      } else {
        if (responseCase_ == 3) {
          responseCase_ = 0;
          response_ = null;
        }
        lookupPermissionSetsRequiredBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * lookup_permission_sets_required is a signal that the consumer should perform a LookupPermissionSets call because
     * the permission set snapshot needs to be rebuilt from scratch. This typically happens when the origin SpiceDB
     * cluster has seen its schema changed.
     * </pre>
     *
     * <code>.authzed.api.materialize.v0.LookupPermissionSetsRequired lookup_permission_sets_required = 3 [json_name = "lookupPermissionSetsRequired"];</code>
     */
    public com.authzed.api.materialize.v0.LookupPermissionSetsRequired.Builder getLookupPermissionSetsRequiredBuilder() {
      return getLookupPermissionSetsRequiredFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * lookup_permission_sets_required is a signal that the consumer should perform a LookupPermissionSets call because
     * the permission set snapshot needs to be rebuilt from scratch. This typically happens when the origin SpiceDB
     * cluster has seen its schema changed.
     * </pre>
     *
     * <code>.authzed.api.materialize.v0.LookupPermissionSetsRequired lookup_permission_sets_required = 3 [json_name = "lookupPermissionSetsRequired"];</code>
     */
    @java.lang.Override
    public com.authzed.api.materialize.v0.LookupPermissionSetsRequiredOrBuilder getLookupPermissionSetsRequiredOrBuilder() {
      if ((responseCase_ == 3) && (lookupPermissionSetsRequiredBuilder_ != null)) {
        return lookupPermissionSetsRequiredBuilder_.getMessageOrBuilder();
      } else {
        if (responseCase_ == 3) {
          return (com.authzed.api.materialize.v0.LookupPermissionSetsRequired) response_;
        }
        return com.authzed.api.materialize.v0.LookupPermissionSetsRequired.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * lookup_permission_sets_required is a signal that the consumer should perform a LookupPermissionSets call because
     * the permission set snapshot needs to be rebuilt from scratch. This typically happens when the origin SpiceDB
     * cluster has seen its schema changed.
     * </pre>
     *
     * <code>.authzed.api.materialize.v0.LookupPermissionSetsRequired lookup_permission_sets_required = 3 [json_name = "lookupPermissionSetsRequired"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.authzed.api.materialize.v0.LookupPermissionSetsRequired, com.authzed.api.materialize.v0.LookupPermissionSetsRequired.Builder, com.authzed.api.materialize.v0.LookupPermissionSetsRequiredOrBuilder> 
        getLookupPermissionSetsRequiredFieldBuilder() {
      if (lookupPermissionSetsRequiredBuilder_ == null) {
        if (!(responseCase_ == 3)) {
          response_ = com.authzed.api.materialize.v0.LookupPermissionSetsRequired.getDefaultInstance();
        }
        lookupPermissionSetsRequiredBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.authzed.api.materialize.v0.LookupPermissionSetsRequired, com.authzed.api.materialize.v0.LookupPermissionSetsRequired.Builder, com.authzed.api.materialize.v0.LookupPermissionSetsRequiredOrBuilder>(
                (com.authzed.api.materialize.v0.LookupPermissionSetsRequired) response_,
                getParentForChildren(),
                isClean());
        response_ = null;
      }
      responseCase_ = 3;
      onChanged();
      return lookupPermissionSetsRequiredBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.authzed.api.materialize.v0.BreakingSchemaChange, com.authzed.api.materialize.v0.BreakingSchemaChange.Builder, com.authzed.api.materialize.v0.BreakingSchemaChangeOrBuilder> breakingSchemaChangeBuilder_;
    /**
     * <pre>
     * breaking_schema_change is a signal that a breaking schema change has been written to the origin SpiceDB cluster,
     * and that the consumer should expect delays in the ingestion of new changes,
     * because the permission set snapshot needs to be rebuilt from scratch. Once the snapshot is ready, the consumer
     * will receive a LookupPermissionSetsRequired event.
     * </pre>
     *
     * <code>.authzed.api.materialize.v0.BreakingSchemaChange breaking_schema_change = 4 [json_name = "breakingSchemaChange"];</code>
     * @return Whether the breakingSchemaChange field is set.
     */
    @java.lang.Override
    public boolean hasBreakingSchemaChange() {
      return responseCase_ == 4;
    }
    /**
     * <pre>
     * breaking_schema_change is a signal that a breaking schema change has been written to the origin SpiceDB cluster,
     * and that the consumer should expect delays in the ingestion of new changes,
     * because the permission set snapshot needs to be rebuilt from scratch. Once the snapshot is ready, the consumer
     * will receive a LookupPermissionSetsRequired event.
     * </pre>
     *
     * <code>.authzed.api.materialize.v0.BreakingSchemaChange breaking_schema_change = 4 [json_name = "breakingSchemaChange"];</code>
     * @return The breakingSchemaChange.
     */
    @java.lang.Override
    public com.authzed.api.materialize.v0.BreakingSchemaChange getBreakingSchemaChange() {
      if (breakingSchemaChangeBuilder_ == null) {
        if (responseCase_ == 4) {
          return (com.authzed.api.materialize.v0.BreakingSchemaChange) response_;
        }
        return com.authzed.api.materialize.v0.BreakingSchemaChange.getDefaultInstance();
      } else {
        if (responseCase_ == 4) {
          return breakingSchemaChangeBuilder_.getMessage();
        }
        return com.authzed.api.materialize.v0.BreakingSchemaChange.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * breaking_schema_change is a signal that a breaking schema change has been written to the origin SpiceDB cluster,
     * and that the consumer should expect delays in the ingestion of new changes,
     * because the permission set snapshot needs to be rebuilt from scratch. Once the snapshot is ready, the consumer
     * will receive a LookupPermissionSetsRequired event.
     * </pre>
     *
     * <code>.authzed.api.materialize.v0.BreakingSchemaChange breaking_schema_change = 4 [json_name = "breakingSchemaChange"];</code>
     */
    public Builder setBreakingSchemaChange(com.authzed.api.materialize.v0.BreakingSchemaChange value) {
      if (breakingSchemaChangeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        response_ = value;
        onChanged();
      } else {
        breakingSchemaChangeBuilder_.setMessage(value);
      }
      responseCase_ = 4;
      return this;
    }
    /**
     * <pre>
     * breaking_schema_change is a signal that a breaking schema change has been written to the origin SpiceDB cluster,
     * and that the consumer should expect delays in the ingestion of new changes,
     * because the permission set snapshot needs to be rebuilt from scratch. Once the snapshot is ready, the consumer
     * will receive a LookupPermissionSetsRequired event.
     * </pre>
     *
     * <code>.authzed.api.materialize.v0.BreakingSchemaChange breaking_schema_change = 4 [json_name = "breakingSchemaChange"];</code>
     */
    public Builder setBreakingSchemaChange(
        com.authzed.api.materialize.v0.BreakingSchemaChange.Builder builderForValue) {
      if (breakingSchemaChangeBuilder_ == null) {
        response_ = builderForValue.build();
        onChanged();
      } else {
        breakingSchemaChangeBuilder_.setMessage(builderForValue.build());
      }
      responseCase_ = 4;
      return this;
    }
    /**
     * <pre>
     * breaking_schema_change is a signal that a breaking schema change has been written to the origin SpiceDB cluster,
     * and that the consumer should expect delays in the ingestion of new changes,
     * because the permission set snapshot needs to be rebuilt from scratch. Once the snapshot is ready, the consumer
     * will receive a LookupPermissionSetsRequired event.
     * </pre>
     *
     * <code>.authzed.api.materialize.v0.BreakingSchemaChange breaking_schema_change = 4 [json_name = "breakingSchemaChange"];</code>
     */
    public Builder mergeBreakingSchemaChange(com.authzed.api.materialize.v0.BreakingSchemaChange value) {
      if (breakingSchemaChangeBuilder_ == null) {
        if (responseCase_ == 4 &&
            response_ != com.authzed.api.materialize.v0.BreakingSchemaChange.getDefaultInstance()) {
          response_ = com.authzed.api.materialize.v0.BreakingSchemaChange.newBuilder((com.authzed.api.materialize.v0.BreakingSchemaChange) response_)
              .mergeFrom(value).buildPartial();
        } else {
          response_ = value;
        }
        onChanged();
      } else {
        if (responseCase_ == 4) {
          breakingSchemaChangeBuilder_.mergeFrom(value);
        } else {
          breakingSchemaChangeBuilder_.setMessage(value);
        }
      }
      responseCase_ = 4;
      return this;
    }
    /**
     * <pre>
     * breaking_schema_change is a signal that a breaking schema change has been written to the origin SpiceDB cluster,
     * and that the consumer should expect delays in the ingestion of new changes,
     * because the permission set snapshot needs to be rebuilt from scratch. Once the snapshot is ready, the consumer
     * will receive a LookupPermissionSetsRequired event.
     * </pre>
     *
     * <code>.authzed.api.materialize.v0.BreakingSchemaChange breaking_schema_change = 4 [json_name = "breakingSchemaChange"];</code>
     */
    public Builder clearBreakingSchemaChange() {
      if (breakingSchemaChangeBuilder_ == null) {
        if (responseCase_ == 4) {
          responseCase_ = 0;
          response_ = null;
          onChanged();
        }
      } else {
        if (responseCase_ == 4) {
          responseCase_ = 0;
          response_ = null;
        }
        breakingSchemaChangeBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * breaking_schema_change is a signal that a breaking schema change has been written to the origin SpiceDB cluster,
     * and that the consumer should expect delays in the ingestion of new changes,
     * because the permission set snapshot needs to be rebuilt from scratch. Once the snapshot is ready, the consumer
     * will receive a LookupPermissionSetsRequired event.
     * </pre>
     *
     * <code>.authzed.api.materialize.v0.BreakingSchemaChange breaking_schema_change = 4 [json_name = "breakingSchemaChange"];</code>
     */
    public com.authzed.api.materialize.v0.BreakingSchemaChange.Builder getBreakingSchemaChangeBuilder() {
      return getBreakingSchemaChangeFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * breaking_schema_change is a signal that a breaking schema change has been written to the origin SpiceDB cluster,
     * and that the consumer should expect delays in the ingestion of new changes,
     * because the permission set snapshot needs to be rebuilt from scratch. Once the snapshot is ready, the consumer
     * will receive a LookupPermissionSetsRequired event.
     * </pre>
     *
     * <code>.authzed.api.materialize.v0.BreakingSchemaChange breaking_schema_change = 4 [json_name = "breakingSchemaChange"];</code>
     */
    @java.lang.Override
    public com.authzed.api.materialize.v0.BreakingSchemaChangeOrBuilder getBreakingSchemaChangeOrBuilder() {
      if ((responseCase_ == 4) && (breakingSchemaChangeBuilder_ != null)) {
        return breakingSchemaChangeBuilder_.getMessageOrBuilder();
      } else {
        if (responseCase_ == 4) {
          return (com.authzed.api.materialize.v0.BreakingSchemaChange) response_;
        }
        return com.authzed.api.materialize.v0.BreakingSchemaChange.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * breaking_schema_change is a signal that a breaking schema change has been written to the origin SpiceDB cluster,
     * and that the consumer should expect delays in the ingestion of new changes,
     * because the permission set snapshot needs to be rebuilt from scratch. Once the snapshot is ready, the consumer
     * will receive a LookupPermissionSetsRequired event.
     * </pre>
     *
     * <code>.authzed.api.materialize.v0.BreakingSchemaChange breaking_schema_change = 4 [json_name = "breakingSchemaChange"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.authzed.api.materialize.v0.BreakingSchemaChange, com.authzed.api.materialize.v0.BreakingSchemaChange.Builder, com.authzed.api.materialize.v0.BreakingSchemaChangeOrBuilder> 
        getBreakingSchemaChangeFieldBuilder() {
      if (breakingSchemaChangeBuilder_ == null) {
        if (!(responseCase_ == 4)) {
          response_ = com.authzed.api.materialize.v0.BreakingSchemaChange.getDefaultInstance();
        }
        breakingSchemaChangeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.authzed.api.materialize.v0.BreakingSchemaChange, com.authzed.api.materialize.v0.BreakingSchemaChange.Builder, com.authzed.api.materialize.v0.BreakingSchemaChangeOrBuilder>(
                (com.authzed.api.materialize.v0.BreakingSchemaChange) response_,
                getParentForChildren(),
                isClean());
        response_ = null;
      }
      responseCase_ = 4;
      onChanged();
      return breakingSchemaChangeBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:authzed.api.materialize.v0.WatchPermissionSetsResponse)
  }

  // @@protoc_insertion_point(class_scope:authzed.api.materialize.v0.WatchPermissionSetsResponse)
  private static final com.authzed.api.materialize.v0.WatchPermissionSetsResponse DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.authzed.api.materialize.v0.WatchPermissionSetsResponse();
  }

  public static com.authzed.api.materialize.v0.WatchPermissionSetsResponse getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<WatchPermissionSetsResponse>
      PARSER = new com.google.protobuf.AbstractParser<WatchPermissionSetsResponse>() {
    @java.lang.Override
    public WatchPermissionSetsResponse parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<WatchPermissionSetsResponse> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<WatchPermissionSetsResponse> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.authzed.api.materialize.v0.WatchPermissionSetsResponse getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

