// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: authzed/api/v1/error_reason.proto

package com.authzed.api.v1;

/**
 * <pre>
 * Defines the supported values for `google.rpc.ErrorInfo.reason` for the
 * `authzed.com` error domain.
 * </pre>
 *
 * Protobuf enum {@code authzed.api.v1.ErrorReason}
 */
public enum ErrorReason
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * Do not use this default value.
   * </pre>
   *
   * <code>ERROR_REASON_UNSPECIFIED = 0;</code>
   */
  ERROR_REASON_UNSPECIFIED(0),
  /**
   * <pre>
   * The request gave a schema that could not be parsed.
   * Example of an ErrorInfo:
   *     { 
   *       "reason": "ERROR_REASON_SCHEMA_PARSE_ERROR",
   *       "domain": "authzed.com",
   *       "metadata": {
   *         "start_line_number": "1",
   *         "start_column_position": "19",
   *         "end_line_number": "1",
   *         "end_column_position": "19",
   *         "source_code": "somedefinition",
   *       }
   *     }
   * The line numbers and column positions are 0-indexed and may not be present.
   * </pre>
   *
   * <code>ERROR_REASON_SCHEMA_PARSE_ERROR = 1;</code>
   */
  ERROR_REASON_SCHEMA_PARSE_ERROR(1),
  /**
   * <pre>
   * The request contains a schema with a type error.
   * Example of an ErrorInfo:
   *     {  
   *       "reason": "ERROR_REASON_SCHEMA_TYPE_ERROR",
   *       "domain": "authzed.com",
   *       "metadata": {
   *         "definition_name": "somedefinition",
   *         ... additional keys based on the kind of type error ...
   *       }
   *     }
   * </pre>
   *
   * <code>ERROR_REASON_SCHEMA_TYPE_ERROR = 2;</code>
   */
  ERROR_REASON_SCHEMA_TYPE_ERROR(2),
  /**
   * <pre>
   * The request referenced an unknown object definition in the schema.
   * Example of an ErrorInfo:
   *     {  
   *       "reason": "ERROR_REASON_UNKNOWN_DEFINITION",
   *       "domain": "authzed.com",
   *       "metadata": {
   *         "definition_name": "somedefinition"
   *       }
   *     }
   * </pre>
   *
   * <code>ERROR_REASON_UNKNOWN_DEFINITION = 3;</code>
   */
  ERROR_REASON_UNKNOWN_DEFINITION(3),
  /**
   * <pre>
   * The request referenced an unknown relation or permission under a definition in the schema.
   * Example of an ErrorInfo:
   *     {  
   *       "reason": "ERROR_REASON_UNKNOWN_RELATION_OR_PERMISSION",
   *       "domain": "authzed.com",
   *       "metadata": {
   *         "definition_name": "somedefinition",
   *         "relation_or_permission_name": "somepermission"
   *       }
   *     }
   * </pre>
   *
   * <code>ERROR_REASON_UNKNOWN_RELATION_OR_PERMISSION = 4;</code>
   */
  ERROR_REASON_UNKNOWN_RELATION_OR_PERMISSION(4),
  /**
   * <pre>
   * The WriteRelationships request contained more updates than the maximum configured.
   * Example of an ErrorInfo:
   *     { "reason": "ERROR_REASON_TOO_MANY_UPDATES_IN_REQUEST",
   *       "domain": "authzed.com",
   *       "metadata": {
   *         "update_count": "525",
   *         "maximum_updates_allowed": "500",
   *       }
   *     }
   * </pre>
   *
   * <code>ERROR_REASON_TOO_MANY_UPDATES_IN_REQUEST = 5;</code>
   */
  ERROR_REASON_TOO_MANY_UPDATES_IN_REQUEST(5),
  /**
   * <pre>
   * The request contained more preconditions than the maximum configured.
   * Example of an ErrorInfo:
   *     {  
   *       "reason": "ERROR_REASON_TOO_MANY_PRECONDITIONS_IN_REQUEST",
   *       "domain": "authzed.com",
   *       "metadata": {
   *         "precondition_count": "525",
   *         "maximum_preconditions_allowed": "500",
   *       }
   *     }
   * </pre>
   *
   * <code>ERROR_REASON_TOO_MANY_PRECONDITIONS_IN_REQUEST = 6;</code>
   */
  ERROR_REASON_TOO_MANY_PRECONDITIONS_IN_REQUEST(6),
  /**
   * <pre>
   * The request contained a precondition that failed.
   * Example of an ErrorInfo:
   *     {  
   *       "reason": "ERROR_REASON_WRITE_OR_DELETE_PRECONDITION_FAILURE",
   *       "domain": "authzed.com",
   *       "metadata": {
   *         "precondition_resource_type": "document",
   *         ... other fields for the filter ...
   *         "precondition_operation": "MUST_EXIST",
   *       }
   *     }
   * </pre>
   *
   * <code>ERROR_REASON_WRITE_OR_DELETE_PRECONDITION_FAILURE = 7;</code>
   */
  ERROR_REASON_WRITE_OR_DELETE_PRECONDITION_FAILURE(7),
  /**
   * <pre>
   * A write or delete request was made to an instance that is deployed in read-only mode.
   * Example of an ErrorInfo:
   *     {  
   *       "reason": "ERROR_REASON_SERVICE_READ_ONLY",
   *       "domain": "authzed.com"
   *     }
   * </pre>
   *
   * <code>ERROR_REASON_SERVICE_READ_ONLY = 8;</code>
   */
  ERROR_REASON_SERVICE_READ_ONLY(8),
  /**
   * <pre>
   * The request referenced an unknown caveat in the schema.
   * Example of an ErrorInfo:
   *     {  
   *       "reason": "ERROR_REASON_UNKNOWN_CAVEAT",
   *       "domain": "authzed.com",
   *       "metadata": {
   *         "caveat_name": "somecaveat"
   *       }
   *     }
   * </pre>
   *
   * <code>ERROR_REASON_UNKNOWN_CAVEAT = 9;</code>
   */
  ERROR_REASON_UNKNOWN_CAVEAT(9),
  /**
   * <pre>
   * The request tries to use a subject type that was not valid for a relation.
   * Example of an ErrorInfo:
   *     {  
   *       "reason": "ERROR_REASON_INVALID_SUBJECT_TYPE",
   *       "domain": "authzed.com",
   *       "metadata": {
   *         "definition_name": "somedefinition",
   *         "relation_name": "somerelation",
   *         "subject_type": "user:*"
   *       }
   *     }
   * </pre>
   *
   * <code>ERROR_REASON_INVALID_SUBJECT_TYPE = 10;</code>
   */
  ERROR_REASON_INVALID_SUBJECT_TYPE(10),
  /**
   * <pre>
   * The request tries to specify a caveat parameter value with the wrong type.
   * Example of an ErrorInfo:
   *     {  
   *       "reason": "ERROR_REASON_CAVEAT_PARAMETER_TYPE_ERROR",
   *       "domain": "authzed.com",
   *       "metadata": {
   *         "definition_name": "somedefinition",
   *         "relation_name": "somerelation",
   *         "caveat_name": "somecaveat",
   *         "parameter_name": "someparameter",
   *         "expected_type": "int",
   *       }
   *     }
   * </pre>
   *
   * <code>ERROR_REASON_CAVEAT_PARAMETER_TYPE_ERROR = 11;</code>
   */
  ERROR_REASON_CAVEAT_PARAMETER_TYPE_ERROR(11),
  /**
   * <pre>
   * The request tries to perform two or more updates on the same relationship in the same WriteRelationships call.
   * Example of an ErrorInfo:
   *     {  
   *       "reason": "ERROR_REASON_UPDATES_ON_SAME_RELATIONSHIP",
   *       "domain": "authzed.com",
   *       "metadata": {
   *         "definition_name": "somedefinition",
   *         "relationship": "somerelationship",
   *       }
   *     }
   * </pre>
   *
   * <code>ERROR_REASON_UPDATES_ON_SAME_RELATIONSHIP = 12;</code>
   */
  ERROR_REASON_UPDATES_ON_SAME_RELATIONSHIP(12),
  /**
   * <pre>
   * The request tries to write a relationship on a permission instead of a relation.
   * Example of an ErrorInfo:
   *     {  
   *       "reason": "ERROR_REASON_CANNOT_UPDATE_PERMISSION",
   *       "domain": "authzed.com",
   *       "metadata": {
   *         "definition_name": "somedefinition",
   *         "permission_name": "somerelation",
   *       }
   *     }
   * </pre>
   *
   * <code>ERROR_REASON_CANNOT_UPDATE_PERMISSION = 13;</code>
   */
  ERROR_REASON_CANNOT_UPDATE_PERMISSION(13),
  /**
   * <pre>
   * The request failed to evaluate a caveat expression due to an error.
   * Example of an ErrorInfo:
   *     {  
   *       "reason": "ERROR_REASON_CAVEAT_EVALUATION_ERROR",
   *       "domain": "authzed.com",
   *       "metadata": {
   *         "caveat_name": "somecaveat",
   *       }
   *     }
   * </pre>
   *
   * <code>ERROR_REASON_CAVEAT_EVALUATION_ERROR = 14;</code>
   */
  ERROR_REASON_CAVEAT_EVALUATION_ERROR(14),
  /**
   * <pre>
   * The request failed because the provided cursor was invalid in some way.
   * Example of an ErrorInfo:
   *     {  
   *       "reason": "ERROR_REASON_INVALID_CURSOR",
   *       "domain": "authzed.com",
   *       "metadata": {
   *          ... additional keys based on the kind of cursor error ...
   *       }
   *     }
   * </pre>
   *
   * <code>ERROR_REASON_INVALID_CURSOR = 15;</code>
   */
  ERROR_REASON_INVALID_CURSOR(15),
  /**
   * <pre>
   * The request failed because there are too many matching relationships to be
   * deleted within a single transactional deletion call. To avoid, set
   * `optional_allow_partial_deletions` to true on the DeleteRelationships call.
   * Example of an ErrorInfo:
   *     {  
   *       "reason": "ERROR_REASON_TOO_MANY_RELATIONSHIPS_FOR_TRANSACTIONAL_DELETE",
   *       "domain": "authzed.com",
   *       "metadata": {
   *          ... fields for the filter ...
   *       }
   *     }
   * </pre>
   *
   * <code>ERROR_REASON_TOO_MANY_RELATIONSHIPS_FOR_TRANSACTIONAL_DELETE = 16;</code>
   */
  ERROR_REASON_TOO_MANY_RELATIONSHIPS_FOR_TRANSACTIONAL_DELETE(16),
  /**
   * <pre>
   * The request failed because the client attempted to write a relationship
   * with a context that exceeded the configured server limit.
   * Example of an ErrorInfo:
   *     {
   *       "reason": "ERROR_REASON_MAX_RELATIONSHIP_CONTEXT_SIZE",
   *       "domain": "authzed.com",
   *       "metadata": {
   *         "relationship":     "relationship_exceeding_the_limit",
   *         "max_allowed_size": "server_max_allowed_context_size",
   *         "context_size":     "actual_relationship_context_size" ,
   *       }
   *     }
   * </pre>
   *
   * <code>ERROR_REASON_MAX_RELATIONSHIP_CONTEXT_SIZE = 17;</code>
   */
  ERROR_REASON_MAX_RELATIONSHIP_CONTEXT_SIZE(17),
  /**
   * <pre>
   * The request failed because a relationship marked to be CREATEd
   * was already present within the datastore.
   * Example of an ErrorInfo:
   *     {
   *       "reason": "ERROR_REASON_ATTEMPT_TO_RECREATE_RELATIONSHIP",
   *       "domain": "authzed.com",
   *       "metadata": {
   *         "relationship":          "relationship_that_already_existed",
   *         "resource_type":         "resource type",
   *         "resource_object_id":    "resource object id",
   *         ... additional decomposed relationship fields ...
   *       }
   *     }
   * </pre>
   *
   * <code>ERROR_REASON_ATTEMPT_TO_RECREATE_RELATIONSHIP = 18;</code>
   */
  ERROR_REASON_ATTEMPT_TO_RECREATE_RELATIONSHIP(18),
  /**
   * <pre>
   * The request failed because it caused the maximum depth allowed to be
   * exceeded. This typically indicates that there is a circular data traversal
   * somewhere in the schema, but can also be raised if the data traversal is simply
   * too deep.
   * Example of an ErrorInfo:
   *     {
   *       "reason": "ERROR_REASON_MAXIMUM_DEPTH_EXCEEDED",
   *       "domain": "authzed.com",
   *       "metadata": {
   *         "maximum_depth_allowed": "50",
   *         ... additional fields based on request type ...
   *       }
   *     }
   * </pre>
   *
   * <code>ERROR_REASON_MAXIMUM_DEPTH_EXCEEDED = 19;</code>
   */
  ERROR_REASON_MAXIMUM_DEPTH_EXCEEDED(19),
  /**
   * <pre>
   * The request failed due to a serialization error in the backend database.
   * This typically indicates that various in flight transactions conflicted with each other
   * and the database had to abort one or more of them. SpiceDB will retry a few times before returning
   * the error to the client.
   * Example of an ErrorInfo:
   *     {
   *       "reason": "ERROR_REASON_SERIALIZATION_FAILURE",
   *       "domain": "authzed.com",
   *       "metadata": {}
   *     }
   * </pre>
   *
   * <code>ERROR_REASON_SERIALIZATION_FAILURE = 20;</code>
   */
  ERROR_REASON_SERIALIZATION_FAILURE(20),
  /**
   * <pre>
   * The request contained more check items than the maximum configured.
   * Example of an ErrorInfo:
   *     {  
   *       "reason": "ERROR_REASON_TOO_MANY_CHECKS_IN_REQUEST",
   *       "domain": "authzed.com",
   *       "metadata": {
   *         "check_count": "525",
   *         "maximum_checks_allowed": "500",
   *       }
   *     }
   * </pre>
   *
   * <code>ERROR_REASON_TOO_MANY_CHECKS_IN_REQUEST = 21;</code>
   */
  ERROR_REASON_TOO_MANY_CHECKS_IN_REQUEST(21),
  /**
   * <pre>
   * The request's specified limit is too large.
   * Example of an ErrorInfo:
   *     {  
   *       "reason": "ERROR_REASON_EXCEEDS_MAXIMUM_ALLOWABLE_LIMIT",
   *       "domain": "authzed.com",
   *       "metadata": {
   *         "limit_provided": "525",
   *         "maximum_limit_allowed": "500",
   *       }
   *     }
   * </pre>
   *
   * <code>ERROR_REASON_EXCEEDS_MAXIMUM_ALLOWABLE_LIMIT = 22;</code>
   */
  ERROR_REASON_EXCEEDS_MAXIMUM_ALLOWABLE_LIMIT(22),
  /**
   * <pre>
   * The request failed because the provided filter was invalid in some way.
   * Example of an ErrorInfo:
   *     {  
   *       "reason": "ERROR_REASON_INVALID_FILTER",
   *       "domain": "authzed.com",
   *       "metadata": {
   *         "filter": "...",
   *       }
   *     }
   * </pre>
   *
   * <code>ERROR_REASON_INVALID_FILTER = 23;</code>
   */
  ERROR_REASON_INVALID_FILTER(23),
  /**
   * <pre>
   * The request failed because too many concurrent updates were attempted
   * against the in-memory datastore.
   * Example of an ErrorInfo:
   *     {  
   *       "reason": "ERROR_REASON_INMEMORY_TOO_MANY_CONCURRENT_UPDATES",
   *       "domain": "authzed.com",
   *       "metadata": {}
   *     }
   * </pre>
   *
   * <code>ERROR_REASON_INMEMORY_TOO_MANY_CONCURRENT_UPDATES = 24;</code>
   */
  ERROR_REASON_INMEMORY_TOO_MANY_CONCURRENT_UPDATES(24),
  /**
   * <pre>
   * The request failed because the precondition specified is empty.
   * Example of an ErrorInfo:
   *     {  
   *       "reason": "ERROR_REASON_EMPTY_PRECONDITION",
   *       "domain": "authzed.com",
   *       "metadata": {}
   *     }
   * </pre>
   *
   * <code>ERROR_REASON_EMPTY_PRECONDITION = 25;</code>
   */
  ERROR_REASON_EMPTY_PRECONDITION(25),
  /**
   * <pre>
   * The request failed because the counter was already registered.
   * Example of an ErrorInfo:
   *     {  
   *       "reason": "ERROR_REASON_COUNTER_ALREADY_REGISTERED",
   *       "domain": "authzed.com",
   *       "metadata": { "counter_name": "name" }
   *     }
   * </pre>
   *
   * <code>ERROR_REASON_COUNTER_ALREADY_REGISTERED = 26;</code>
   */
  ERROR_REASON_COUNTER_ALREADY_REGISTERED(26),
  /**
   * <pre>
   * The request failed because the counter was not registered.
   * Example of an ErrorInfo:
   *     {  
   *       "reason": "ERROR_REASON_COUNTER_NOT_REGISTERED",
   *       "domain": "authzed.com",
   *       "metadata": { "counter_name": "name"  }
   *     }
   * </pre>
   *
   * <code>ERROR_REASON_COUNTER_NOT_REGISTERED = 27;</code>
   */
  ERROR_REASON_COUNTER_NOT_REGISTERED(27),
  /**
   * <pre>
   * The request failed because a wildcard was not allowed. For CheckPermission,
   * this means that the subject or resource ID was a wildcard. For LookupResources,
   * this means that the subject ID was a wildcard.
   * Example of an ErrorInfo:
   *     {  
   *       "reason": "ERROR_REASON_WILDCARD_NOT_ALLOWED",
   *       "domain": "authzed.com",
   *       "metadata": { "disallowed_field": "subject_id" }
   *     }
   * </pre>
   *
   * <code>ERROR_REASON_WILDCARD_NOT_ALLOWED = 28;</code>
   */
  ERROR_REASON_WILDCARD_NOT_ALLOWED(28),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * Do not use this default value.
   * </pre>
   *
   * <code>ERROR_REASON_UNSPECIFIED = 0;</code>
   */
  public static final int ERROR_REASON_UNSPECIFIED_VALUE = 0;
  /**
   * <pre>
   * The request gave a schema that could not be parsed.
   * Example of an ErrorInfo:
   *     { 
   *       "reason": "ERROR_REASON_SCHEMA_PARSE_ERROR",
   *       "domain": "authzed.com",
   *       "metadata": {
   *         "start_line_number": "1",
   *         "start_column_position": "19",
   *         "end_line_number": "1",
   *         "end_column_position": "19",
   *         "source_code": "somedefinition",
   *       }
   *     }
   * The line numbers and column positions are 0-indexed and may not be present.
   * </pre>
   *
   * <code>ERROR_REASON_SCHEMA_PARSE_ERROR = 1;</code>
   */
  public static final int ERROR_REASON_SCHEMA_PARSE_ERROR_VALUE = 1;
  /**
   * <pre>
   * The request contains a schema with a type error.
   * Example of an ErrorInfo:
   *     {  
   *       "reason": "ERROR_REASON_SCHEMA_TYPE_ERROR",
   *       "domain": "authzed.com",
   *       "metadata": {
   *         "definition_name": "somedefinition",
   *         ... additional keys based on the kind of type error ...
   *       }
   *     }
   * </pre>
   *
   * <code>ERROR_REASON_SCHEMA_TYPE_ERROR = 2;</code>
   */
  public static final int ERROR_REASON_SCHEMA_TYPE_ERROR_VALUE = 2;
  /**
   * <pre>
   * The request referenced an unknown object definition in the schema.
   * Example of an ErrorInfo:
   *     {  
   *       "reason": "ERROR_REASON_UNKNOWN_DEFINITION",
   *       "domain": "authzed.com",
   *       "metadata": {
   *         "definition_name": "somedefinition"
   *       }
   *     }
   * </pre>
   *
   * <code>ERROR_REASON_UNKNOWN_DEFINITION = 3;</code>
   */
  public static final int ERROR_REASON_UNKNOWN_DEFINITION_VALUE = 3;
  /**
   * <pre>
   * The request referenced an unknown relation or permission under a definition in the schema.
   * Example of an ErrorInfo:
   *     {  
   *       "reason": "ERROR_REASON_UNKNOWN_RELATION_OR_PERMISSION",
   *       "domain": "authzed.com",
   *       "metadata": {
   *         "definition_name": "somedefinition",
   *         "relation_or_permission_name": "somepermission"
   *       }
   *     }
   * </pre>
   *
   * <code>ERROR_REASON_UNKNOWN_RELATION_OR_PERMISSION = 4;</code>
   */
  public static final int ERROR_REASON_UNKNOWN_RELATION_OR_PERMISSION_VALUE = 4;
  /**
   * <pre>
   * The WriteRelationships request contained more updates than the maximum configured.
   * Example of an ErrorInfo:
   *     { "reason": "ERROR_REASON_TOO_MANY_UPDATES_IN_REQUEST",
   *       "domain": "authzed.com",
   *       "metadata": {
   *         "update_count": "525",
   *         "maximum_updates_allowed": "500",
   *       }
   *     }
   * </pre>
   *
   * <code>ERROR_REASON_TOO_MANY_UPDATES_IN_REQUEST = 5;</code>
   */
  public static final int ERROR_REASON_TOO_MANY_UPDATES_IN_REQUEST_VALUE = 5;
  /**
   * <pre>
   * The request contained more preconditions than the maximum configured.
   * Example of an ErrorInfo:
   *     {  
   *       "reason": "ERROR_REASON_TOO_MANY_PRECONDITIONS_IN_REQUEST",
   *       "domain": "authzed.com",
   *       "metadata": {
   *         "precondition_count": "525",
   *         "maximum_preconditions_allowed": "500",
   *       }
   *     }
   * </pre>
   *
   * <code>ERROR_REASON_TOO_MANY_PRECONDITIONS_IN_REQUEST = 6;</code>
   */
  public static final int ERROR_REASON_TOO_MANY_PRECONDITIONS_IN_REQUEST_VALUE = 6;
  /**
   * <pre>
   * The request contained a precondition that failed.
   * Example of an ErrorInfo:
   *     {  
   *       "reason": "ERROR_REASON_WRITE_OR_DELETE_PRECONDITION_FAILURE",
   *       "domain": "authzed.com",
   *       "metadata": {
   *         "precondition_resource_type": "document",
   *         ... other fields for the filter ...
   *         "precondition_operation": "MUST_EXIST",
   *       }
   *     }
   * </pre>
   *
   * <code>ERROR_REASON_WRITE_OR_DELETE_PRECONDITION_FAILURE = 7;</code>
   */
  public static final int ERROR_REASON_WRITE_OR_DELETE_PRECONDITION_FAILURE_VALUE = 7;
  /**
   * <pre>
   * A write or delete request was made to an instance that is deployed in read-only mode.
   * Example of an ErrorInfo:
   *     {  
   *       "reason": "ERROR_REASON_SERVICE_READ_ONLY",
   *       "domain": "authzed.com"
   *     }
   * </pre>
   *
   * <code>ERROR_REASON_SERVICE_READ_ONLY = 8;</code>
   */
  public static final int ERROR_REASON_SERVICE_READ_ONLY_VALUE = 8;
  /**
   * <pre>
   * The request referenced an unknown caveat in the schema.
   * Example of an ErrorInfo:
   *     {  
   *       "reason": "ERROR_REASON_UNKNOWN_CAVEAT",
   *       "domain": "authzed.com",
   *       "metadata": {
   *         "caveat_name": "somecaveat"
   *       }
   *     }
   * </pre>
   *
   * <code>ERROR_REASON_UNKNOWN_CAVEAT = 9;</code>
   */
  public static final int ERROR_REASON_UNKNOWN_CAVEAT_VALUE = 9;
  /**
   * <pre>
   * The request tries to use a subject type that was not valid for a relation.
   * Example of an ErrorInfo:
   *     {  
   *       "reason": "ERROR_REASON_INVALID_SUBJECT_TYPE",
   *       "domain": "authzed.com",
   *       "metadata": {
   *         "definition_name": "somedefinition",
   *         "relation_name": "somerelation",
   *         "subject_type": "user:*"
   *       }
   *     }
   * </pre>
   *
   * <code>ERROR_REASON_INVALID_SUBJECT_TYPE = 10;</code>
   */
  public static final int ERROR_REASON_INVALID_SUBJECT_TYPE_VALUE = 10;
  /**
   * <pre>
   * The request tries to specify a caveat parameter value with the wrong type.
   * Example of an ErrorInfo:
   *     {  
   *       "reason": "ERROR_REASON_CAVEAT_PARAMETER_TYPE_ERROR",
   *       "domain": "authzed.com",
   *       "metadata": {
   *         "definition_name": "somedefinition",
   *         "relation_name": "somerelation",
   *         "caveat_name": "somecaveat",
   *         "parameter_name": "someparameter",
   *         "expected_type": "int",
   *       }
   *     }
   * </pre>
   *
   * <code>ERROR_REASON_CAVEAT_PARAMETER_TYPE_ERROR = 11;</code>
   */
  public static final int ERROR_REASON_CAVEAT_PARAMETER_TYPE_ERROR_VALUE = 11;
  /**
   * <pre>
   * The request tries to perform two or more updates on the same relationship in the same WriteRelationships call.
   * Example of an ErrorInfo:
   *     {  
   *       "reason": "ERROR_REASON_UPDATES_ON_SAME_RELATIONSHIP",
   *       "domain": "authzed.com",
   *       "metadata": {
   *         "definition_name": "somedefinition",
   *         "relationship": "somerelationship",
   *       }
   *     }
   * </pre>
   *
   * <code>ERROR_REASON_UPDATES_ON_SAME_RELATIONSHIP = 12;</code>
   */
  public static final int ERROR_REASON_UPDATES_ON_SAME_RELATIONSHIP_VALUE = 12;
  /**
   * <pre>
   * The request tries to write a relationship on a permission instead of a relation.
   * Example of an ErrorInfo:
   *     {  
   *       "reason": "ERROR_REASON_CANNOT_UPDATE_PERMISSION",
   *       "domain": "authzed.com",
   *       "metadata": {
   *         "definition_name": "somedefinition",
   *         "permission_name": "somerelation",
   *       }
   *     }
   * </pre>
   *
   * <code>ERROR_REASON_CANNOT_UPDATE_PERMISSION = 13;</code>
   */
  public static final int ERROR_REASON_CANNOT_UPDATE_PERMISSION_VALUE = 13;
  /**
   * <pre>
   * The request failed to evaluate a caveat expression due to an error.
   * Example of an ErrorInfo:
   *     {  
   *       "reason": "ERROR_REASON_CAVEAT_EVALUATION_ERROR",
   *       "domain": "authzed.com",
   *       "metadata": {
   *         "caveat_name": "somecaveat",
   *       }
   *     }
   * </pre>
   *
   * <code>ERROR_REASON_CAVEAT_EVALUATION_ERROR = 14;</code>
   */
  public static final int ERROR_REASON_CAVEAT_EVALUATION_ERROR_VALUE = 14;
  /**
   * <pre>
   * The request failed because the provided cursor was invalid in some way.
   * Example of an ErrorInfo:
   *     {  
   *       "reason": "ERROR_REASON_INVALID_CURSOR",
   *       "domain": "authzed.com",
   *       "metadata": {
   *          ... additional keys based on the kind of cursor error ...
   *       }
   *     }
   * </pre>
   *
   * <code>ERROR_REASON_INVALID_CURSOR = 15;</code>
   */
  public static final int ERROR_REASON_INVALID_CURSOR_VALUE = 15;
  /**
   * <pre>
   * The request failed because there are too many matching relationships to be
   * deleted within a single transactional deletion call. To avoid, set
   * `optional_allow_partial_deletions` to true on the DeleteRelationships call.
   * Example of an ErrorInfo:
   *     {  
   *       "reason": "ERROR_REASON_TOO_MANY_RELATIONSHIPS_FOR_TRANSACTIONAL_DELETE",
   *       "domain": "authzed.com",
   *       "metadata": {
   *          ... fields for the filter ...
   *       }
   *     }
   * </pre>
   *
   * <code>ERROR_REASON_TOO_MANY_RELATIONSHIPS_FOR_TRANSACTIONAL_DELETE = 16;</code>
   */
  public static final int ERROR_REASON_TOO_MANY_RELATIONSHIPS_FOR_TRANSACTIONAL_DELETE_VALUE = 16;
  /**
   * <pre>
   * The request failed because the client attempted to write a relationship
   * with a context that exceeded the configured server limit.
   * Example of an ErrorInfo:
   *     {
   *       "reason": "ERROR_REASON_MAX_RELATIONSHIP_CONTEXT_SIZE",
   *       "domain": "authzed.com",
   *       "metadata": {
   *         "relationship":     "relationship_exceeding_the_limit",
   *         "max_allowed_size": "server_max_allowed_context_size",
   *         "context_size":     "actual_relationship_context_size" ,
   *       }
   *     }
   * </pre>
   *
   * <code>ERROR_REASON_MAX_RELATIONSHIP_CONTEXT_SIZE = 17;</code>
   */
  public static final int ERROR_REASON_MAX_RELATIONSHIP_CONTEXT_SIZE_VALUE = 17;
  /**
   * <pre>
   * The request failed because a relationship marked to be CREATEd
   * was already present within the datastore.
   * Example of an ErrorInfo:
   *     {
   *       "reason": "ERROR_REASON_ATTEMPT_TO_RECREATE_RELATIONSHIP",
   *       "domain": "authzed.com",
   *       "metadata": {
   *         "relationship":          "relationship_that_already_existed",
   *         "resource_type":         "resource type",
   *         "resource_object_id":    "resource object id",
   *         ... additional decomposed relationship fields ...
   *       }
   *     }
   * </pre>
   *
   * <code>ERROR_REASON_ATTEMPT_TO_RECREATE_RELATIONSHIP = 18;</code>
   */
  public static final int ERROR_REASON_ATTEMPT_TO_RECREATE_RELATIONSHIP_VALUE = 18;
  /**
   * <pre>
   * The request failed because it caused the maximum depth allowed to be
   * exceeded. This typically indicates that there is a circular data traversal
   * somewhere in the schema, but can also be raised if the data traversal is simply
   * too deep.
   * Example of an ErrorInfo:
   *     {
   *       "reason": "ERROR_REASON_MAXIMUM_DEPTH_EXCEEDED",
   *       "domain": "authzed.com",
   *       "metadata": {
   *         "maximum_depth_allowed": "50",
   *         ... additional fields based on request type ...
   *       }
   *     }
   * </pre>
   *
   * <code>ERROR_REASON_MAXIMUM_DEPTH_EXCEEDED = 19;</code>
   */
  public static final int ERROR_REASON_MAXIMUM_DEPTH_EXCEEDED_VALUE = 19;
  /**
   * <pre>
   * The request failed due to a serialization error in the backend database.
   * This typically indicates that various in flight transactions conflicted with each other
   * and the database had to abort one or more of them. SpiceDB will retry a few times before returning
   * the error to the client.
   * Example of an ErrorInfo:
   *     {
   *       "reason": "ERROR_REASON_SERIALIZATION_FAILURE",
   *       "domain": "authzed.com",
   *       "metadata": {}
   *     }
   * </pre>
   *
   * <code>ERROR_REASON_SERIALIZATION_FAILURE = 20;</code>
   */
  public static final int ERROR_REASON_SERIALIZATION_FAILURE_VALUE = 20;
  /**
   * <pre>
   * The request contained more check items than the maximum configured.
   * Example of an ErrorInfo:
   *     {  
   *       "reason": "ERROR_REASON_TOO_MANY_CHECKS_IN_REQUEST",
   *       "domain": "authzed.com",
   *       "metadata": {
   *         "check_count": "525",
   *         "maximum_checks_allowed": "500",
   *       }
   *     }
   * </pre>
   *
   * <code>ERROR_REASON_TOO_MANY_CHECKS_IN_REQUEST = 21;</code>
   */
  public static final int ERROR_REASON_TOO_MANY_CHECKS_IN_REQUEST_VALUE = 21;
  /**
   * <pre>
   * The request's specified limit is too large.
   * Example of an ErrorInfo:
   *     {  
   *       "reason": "ERROR_REASON_EXCEEDS_MAXIMUM_ALLOWABLE_LIMIT",
   *       "domain": "authzed.com",
   *       "metadata": {
   *         "limit_provided": "525",
   *         "maximum_limit_allowed": "500",
   *       }
   *     }
   * </pre>
   *
   * <code>ERROR_REASON_EXCEEDS_MAXIMUM_ALLOWABLE_LIMIT = 22;</code>
   */
  public static final int ERROR_REASON_EXCEEDS_MAXIMUM_ALLOWABLE_LIMIT_VALUE = 22;
  /**
   * <pre>
   * The request failed because the provided filter was invalid in some way.
   * Example of an ErrorInfo:
   *     {  
   *       "reason": "ERROR_REASON_INVALID_FILTER",
   *       "domain": "authzed.com",
   *       "metadata": {
   *         "filter": "...",
   *       }
   *     }
   * </pre>
   *
   * <code>ERROR_REASON_INVALID_FILTER = 23;</code>
   */
  public static final int ERROR_REASON_INVALID_FILTER_VALUE = 23;
  /**
   * <pre>
   * The request failed because too many concurrent updates were attempted
   * against the in-memory datastore.
   * Example of an ErrorInfo:
   *     {  
   *       "reason": "ERROR_REASON_INMEMORY_TOO_MANY_CONCURRENT_UPDATES",
   *       "domain": "authzed.com",
   *       "metadata": {}
   *     }
   * </pre>
   *
   * <code>ERROR_REASON_INMEMORY_TOO_MANY_CONCURRENT_UPDATES = 24;</code>
   */
  public static final int ERROR_REASON_INMEMORY_TOO_MANY_CONCURRENT_UPDATES_VALUE = 24;
  /**
   * <pre>
   * The request failed because the precondition specified is empty.
   * Example of an ErrorInfo:
   *     {  
   *       "reason": "ERROR_REASON_EMPTY_PRECONDITION",
   *       "domain": "authzed.com",
   *       "metadata": {}
   *     }
   * </pre>
   *
   * <code>ERROR_REASON_EMPTY_PRECONDITION = 25;</code>
   */
  public static final int ERROR_REASON_EMPTY_PRECONDITION_VALUE = 25;
  /**
   * <pre>
   * The request failed because the counter was already registered.
   * Example of an ErrorInfo:
   *     {  
   *       "reason": "ERROR_REASON_COUNTER_ALREADY_REGISTERED",
   *       "domain": "authzed.com",
   *       "metadata": { "counter_name": "name" }
   *     }
   * </pre>
   *
   * <code>ERROR_REASON_COUNTER_ALREADY_REGISTERED = 26;</code>
   */
  public static final int ERROR_REASON_COUNTER_ALREADY_REGISTERED_VALUE = 26;
  /**
   * <pre>
   * The request failed because the counter was not registered.
   * Example of an ErrorInfo:
   *     {  
   *       "reason": "ERROR_REASON_COUNTER_NOT_REGISTERED",
   *       "domain": "authzed.com",
   *       "metadata": { "counter_name": "name"  }
   *     }
   * </pre>
   *
   * <code>ERROR_REASON_COUNTER_NOT_REGISTERED = 27;</code>
   */
  public static final int ERROR_REASON_COUNTER_NOT_REGISTERED_VALUE = 27;
  /**
   * <pre>
   * The request failed because a wildcard was not allowed. For CheckPermission,
   * this means that the subject or resource ID was a wildcard. For LookupResources,
   * this means that the subject ID was a wildcard.
   * Example of an ErrorInfo:
   *     {  
   *       "reason": "ERROR_REASON_WILDCARD_NOT_ALLOWED",
   *       "domain": "authzed.com",
   *       "metadata": { "disallowed_field": "subject_id" }
   *     }
   * </pre>
   *
   * <code>ERROR_REASON_WILDCARD_NOT_ALLOWED = 28;</code>
   */
  public static final int ERROR_REASON_WILDCARD_NOT_ALLOWED_VALUE = 28;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static ErrorReason valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static ErrorReason forNumber(int value) {
    switch (value) {
      case 0: return ERROR_REASON_UNSPECIFIED;
      case 1: return ERROR_REASON_SCHEMA_PARSE_ERROR;
      case 2: return ERROR_REASON_SCHEMA_TYPE_ERROR;
      case 3: return ERROR_REASON_UNKNOWN_DEFINITION;
      case 4: return ERROR_REASON_UNKNOWN_RELATION_OR_PERMISSION;
      case 5: return ERROR_REASON_TOO_MANY_UPDATES_IN_REQUEST;
      case 6: return ERROR_REASON_TOO_MANY_PRECONDITIONS_IN_REQUEST;
      case 7: return ERROR_REASON_WRITE_OR_DELETE_PRECONDITION_FAILURE;
      case 8: return ERROR_REASON_SERVICE_READ_ONLY;
      case 9: return ERROR_REASON_UNKNOWN_CAVEAT;
      case 10: return ERROR_REASON_INVALID_SUBJECT_TYPE;
      case 11: return ERROR_REASON_CAVEAT_PARAMETER_TYPE_ERROR;
      case 12: return ERROR_REASON_UPDATES_ON_SAME_RELATIONSHIP;
      case 13: return ERROR_REASON_CANNOT_UPDATE_PERMISSION;
      case 14: return ERROR_REASON_CAVEAT_EVALUATION_ERROR;
      case 15: return ERROR_REASON_INVALID_CURSOR;
      case 16: return ERROR_REASON_TOO_MANY_RELATIONSHIPS_FOR_TRANSACTIONAL_DELETE;
      case 17: return ERROR_REASON_MAX_RELATIONSHIP_CONTEXT_SIZE;
      case 18: return ERROR_REASON_ATTEMPT_TO_RECREATE_RELATIONSHIP;
      case 19: return ERROR_REASON_MAXIMUM_DEPTH_EXCEEDED;
      case 20: return ERROR_REASON_SERIALIZATION_FAILURE;
      case 21: return ERROR_REASON_TOO_MANY_CHECKS_IN_REQUEST;
      case 22: return ERROR_REASON_EXCEEDS_MAXIMUM_ALLOWABLE_LIMIT;
      case 23: return ERROR_REASON_INVALID_FILTER;
      case 24: return ERROR_REASON_INMEMORY_TOO_MANY_CONCURRENT_UPDATES;
      case 25: return ERROR_REASON_EMPTY_PRECONDITION;
      case 26: return ERROR_REASON_COUNTER_ALREADY_REGISTERED;
      case 27: return ERROR_REASON_COUNTER_NOT_REGISTERED;
      case 28: return ERROR_REASON_WILDCARD_NOT_ALLOWED;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<ErrorReason>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      ErrorReason> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<ErrorReason>() {
          public ErrorReason findValueByNumber(int number) {
            return ErrorReason.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.authzed.api.v1.ErrorReasonOuterClass.getDescriptor().getEnumTypes().get(0);
  }

  private static final ErrorReason[] VALUES = values();

  public static ErrorReason valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private ErrorReason(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:authzed.api.v1.ErrorReason)
}

