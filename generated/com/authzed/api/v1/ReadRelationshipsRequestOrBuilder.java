// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: authzed/api/v1/permission_service.proto

package com.authzed.api.v1;

public interface ReadRelationshipsRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:authzed.api.v1.ReadRelationshipsRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>.authzed.api.v1.Consistency consistency = 1 [json_name = "consistency"];</code>
   * @return Whether the consistency field is set.
   */
  boolean hasConsistency();
  /**
   * <code>.authzed.api.v1.Consistency consistency = 1 [json_name = "consistency"];</code>
   * @return The consistency.
   */
  com.authzed.api.v1.Consistency getConsistency();
  /**
   * <code>.authzed.api.v1.Consistency consistency = 1 [json_name = "consistency"];</code>
   */
  com.authzed.api.v1.ConsistencyOrBuilder getConsistencyOrBuilder();

  /**
   * <pre>
   * relationship_filter defines the filter to be applied to the relationships
   * to be returned.
   * </pre>
   *
   * <code>.authzed.api.v1.RelationshipFilter relationship_filter = 2 [json_name = "relationshipFilter", (.validate.rules) = { ... }</code>
   * @return Whether the relationshipFilter field is set.
   */
  boolean hasRelationshipFilter();
  /**
   * <pre>
   * relationship_filter defines the filter to be applied to the relationships
   * to be returned.
   * </pre>
   *
   * <code>.authzed.api.v1.RelationshipFilter relationship_filter = 2 [json_name = "relationshipFilter", (.validate.rules) = { ... }</code>
   * @return The relationshipFilter.
   */
  com.authzed.api.v1.RelationshipFilter getRelationshipFilter();
  /**
   * <pre>
   * relationship_filter defines the filter to be applied to the relationships
   * to be returned.
   * </pre>
   *
   * <code>.authzed.api.v1.RelationshipFilter relationship_filter = 2 [json_name = "relationshipFilter", (.validate.rules) = { ... }</code>
   */
  com.authzed.api.v1.RelationshipFilterOrBuilder getRelationshipFilterOrBuilder();

  /**
   * <pre>
   * optional_limit, if non-zero, specifies the limit on the number of relationships to return
   * before the stream is closed on the server side. By default, the stream will continue
   * resolving relationships until exhausted or the stream is closed due to the client or a
   * network issue.
   * </pre>
   *
   * <code>uint32 optional_limit = 3 [json_name = "optionalLimit", (.validate.rules) = { ... }</code>
   * @return The optionalLimit.
   */
  int getOptionalLimit();

  /**
   * <pre>
   * optional_cursor, if specified, indicates the cursor after which results should resume being returned.
   * The cursor can be found on the ReadRelationshipsResponse object.
   * </pre>
   *
   * <code>.authzed.api.v1.Cursor optional_cursor = 4 [json_name = "optionalCursor"];</code>
   * @return Whether the optionalCursor field is set.
   */
  boolean hasOptionalCursor();
  /**
   * <pre>
   * optional_cursor, if specified, indicates the cursor after which results should resume being returned.
   * The cursor can be found on the ReadRelationshipsResponse object.
   * </pre>
   *
   * <code>.authzed.api.v1.Cursor optional_cursor = 4 [json_name = "optionalCursor"];</code>
   * @return The optionalCursor.
   */
  com.authzed.api.v1.Cursor getOptionalCursor();
  /**
   * <pre>
   * optional_cursor, if specified, indicates the cursor after which results should resume being returned.
   * The cursor can be found on the ReadRelationshipsResponse object.
   * </pre>
   *
   * <code>.authzed.api.v1.Cursor optional_cursor = 4 [json_name = "optionalCursor"];</code>
   */
  com.authzed.api.v1.CursorOrBuilder getOptionalCursorOrBuilder();
}
