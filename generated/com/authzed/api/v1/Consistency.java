// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: authzed/api/v1/permission_service.proto

package com.authzed.api.v1;

/**
 * <pre>
 * Consistency will define how a request is handled by the backend.
 * By defining a consistency requirement, and a token at which those
 * requirements should be applied, where applicable.
 * </pre>
 *
 * Protobuf type {@code authzed.api.v1.Consistency}
 */
public final class Consistency extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:authzed.api.v1.Consistency)
    ConsistencyOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Consistency.newBuilder() to construct.
  private Consistency(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Consistency() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new Consistency();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.authzed.api.v1.PermissionService.internal_static_authzed_api_v1_Consistency_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.authzed.api.v1.PermissionService.internal_static_authzed_api_v1_Consistency_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.authzed.api.v1.Consistency.class, com.authzed.api.v1.Consistency.Builder.class);
  }

  private int requirementCase_ = 0;
  private java.lang.Object requirement_;
  public enum RequirementCase
      implements com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    MINIMIZE_LATENCY(1),
    AT_LEAST_AS_FRESH(2),
    AT_EXACT_SNAPSHOT(3),
    FULLY_CONSISTENT(4),
    REQUIREMENT_NOT_SET(0);
    private final int value;
    private RequirementCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static RequirementCase valueOf(int value) {
      return forNumber(value);
    }

    public static RequirementCase forNumber(int value) {
      switch (value) {
        case 1: return MINIMIZE_LATENCY;
        case 2: return AT_LEAST_AS_FRESH;
        case 3: return AT_EXACT_SNAPSHOT;
        case 4: return FULLY_CONSISTENT;
        case 0: return REQUIREMENT_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public RequirementCase
  getRequirementCase() {
    return RequirementCase.forNumber(
        requirementCase_);
  }

  public static final int MINIMIZE_LATENCY_FIELD_NUMBER = 1;
  /**
   * <pre>
   * minimize_latency indicates that the latency for the call should be
   * minimized by having the system select the fastest snapshot available.
   * </pre>
   *
   * <code>bool minimize_latency = 1 [json_name = "minimizeLatency", (.validate.rules) = { ... }</code>
   * @return Whether the minimizeLatency field is set.
   */
  @java.lang.Override
  public boolean hasMinimizeLatency() {
    return requirementCase_ == 1;
  }
  /**
   * <pre>
   * minimize_latency indicates that the latency for the call should be
   * minimized by having the system select the fastest snapshot available.
   * </pre>
   *
   * <code>bool minimize_latency = 1 [json_name = "minimizeLatency", (.validate.rules) = { ... }</code>
   * @return The minimizeLatency.
   */
  @java.lang.Override
  public boolean getMinimizeLatency() {
    if (requirementCase_ == 1) {
      return (java.lang.Boolean) requirement_;
    }
    return false;
  }

  public static final int AT_LEAST_AS_FRESH_FIELD_NUMBER = 2;
  /**
   * <pre>
   * at_least_as_fresh indicates that all data used in the API call must be
   * *at least as fresh* as that found in the ZedToken; more recent data might
   * be used if available or faster.
   * </pre>
   *
   * <code>.authzed.api.v1.ZedToken at_least_as_fresh = 2 [json_name = "atLeastAsFresh"];</code>
   * @return Whether the atLeastAsFresh field is set.
   */
  @java.lang.Override
  public boolean hasAtLeastAsFresh() {
    return requirementCase_ == 2;
  }
  /**
   * <pre>
   * at_least_as_fresh indicates that all data used in the API call must be
   * *at least as fresh* as that found in the ZedToken; more recent data might
   * be used if available or faster.
   * </pre>
   *
   * <code>.authzed.api.v1.ZedToken at_least_as_fresh = 2 [json_name = "atLeastAsFresh"];</code>
   * @return The atLeastAsFresh.
   */
  @java.lang.Override
  public com.authzed.api.v1.ZedToken getAtLeastAsFresh() {
    if (requirementCase_ == 2) {
       return (com.authzed.api.v1.ZedToken) requirement_;
    }
    return com.authzed.api.v1.ZedToken.getDefaultInstance();
  }
  /**
   * <pre>
   * at_least_as_fresh indicates that all data used in the API call must be
   * *at least as fresh* as that found in the ZedToken; more recent data might
   * be used if available or faster.
   * </pre>
   *
   * <code>.authzed.api.v1.ZedToken at_least_as_fresh = 2 [json_name = "atLeastAsFresh"];</code>
   */
  @java.lang.Override
  public com.authzed.api.v1.ZedTokenOrBuilder getAtLeastAsFreshOrBuilder() {
    if (requirementCase_ == 2) {
       return (com.authzed.api.v1.ZedToken) requirement_;
    }
    return com.authzed.api.v1.ZedToken.getDefaultInstance();
  }

  public static final int AT_EXACT_SNAPSHOT_FIELD_NUMBER = 3;
  /**
   * <pre>
   * at_exact_snapshot indicates that all data used in the API call must be
   * *at the given* snapshot in time; if the snapshot is no longer available,
   * an error will be returned to the caller.
   * </pre>
   *
   * <code>.authzed.api.v1.ZedToken at_exact_snapshot = 3 [json_name = "atExactSnapshot"];</code>
   * @return Whether the atExactSnapshot field is set.
   */
  @java.lang.Override
  public boolean hasAtExactSnapshot() {
    return requirementCase_ == 3;
  }
  /**
   * <pre>
   * at_exact_snapshot indicates that all data used in the API call must be
   * *at the given* snapshot in time; if the snapshot is no longer available,
   * an error will be returned to the caller.
   * </pre>
   *
   * <code>.authzed.api.v1.ZedToken at_exact_snapshot = 3 [json_name = "atExactSnapshot"];</code>
   * @return The atExactSnapshot.
   */
  @java.lang.Override
  public com.authzed.api.v1.ZedToken getAtExactSnapshot() {
    if (requirementCase_ == 3) {
       return (com.authzed.api.v1.ZedToken) requirement_;
    }
    return com.authzed.api.v1.ZedToken.getDefaultInstance();
  }
  /**
   * <pre>
   * at_exact_snapshot indicates that all data used in the API call must be
   * *at the given* snapshot in time; if the snapshot is no longer available,
   * an error will be returned to the caller.
   * </pre>
   *
   * <code>.authzed.api.v1.ZedToken at_exact_snapshot = 3 [json_name = "atExactSnapshot"];</code>
   */
  @java.lang.Override
  public com.authzed.api.v1.ZedTokenOrBuilder getAtExactSnapshotOrBuilder() {
    if (requirementCase_ == 3) {
       return (com.authzed.api.v1.ZedToken) requirement_;
    }
    return com.authzed.api.v1.ZedToken.getDefaultInstance();
  }

  public static final int FULLY_CONSISTENT_FIELD_NUMBER = 4;
  /**
   * <pre>
   * fully_consistent indicates that all data used in the API call *must* be
   * at the most recent snapshot found.
   * NOTE: using this method can be *quite slow*, so unless there is a need to
   * do so, it is recommended to use `at_least_as_fresh` with a stored
   * ZedToken.
   * </pre>
   *
   * <code>bool fully_consistent = 4 [json_name = "fullyConsistent", (.validate.rules) = { ... }</code>
   * @return Whether the fullyConsistent field is set.
   */
  @java.lang.Override
  public boolean hasFullyConsistent() {
    return requirementCase_ == 4;
  }
  /**
   * <pre>
   * fully_consistent indicates that all data used in the API call *must* be
   * at the most recent snapshot found.
   * NOTE: using this method can be *quite slow*, so unless there is a need to
   * do so, it is recommended to use `at_least_as_fresh` with a stored
   * ZedToken.
   * </pre>
   *
   * <code>bool fully_consistent = 4 [json_name = "fullyConsistent", (.validate.rules) = { ... }</code>
   * @return The fullyConsistent.
   */
  @java.lang.Override
  public boolean getFullyConsistent() {
    if (requirementCase_ == 4) {
      return (java.lang.Boolean) requirement_;
    }
    return false;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (requirementCase_ == 1) {
      output.writeBool(
          1, (boolean)((java.lang.Boolean) requirement_));
    }
    if (requirementCase_ == 2) {
      output.writeMessage(2, (com.authzed.api.v1.ZedToken) requirement_);
    }
    if (requirementCase_ == 3) {
      output.writeMessage(3, (com.authzed.api.v1.ZedToken) requirement_);
    }
    if (requirementCase_ == 4) {
      output.writeBool(
          4, (boolean)((java.lang.Boolean) requirement_));
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (requirementCase_ == 1) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(
            1, (boolean)((java.lang.Boolean) requirement_));
    }
    if (requirementCase_ == 2) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, (com.authzed.api.v1.ZedToken) requirement_);
    }
    if (requirementCase_ == 3) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, (com.authzed.api.v1.ZedToken) requirement_);
    }
    if (requirementCase_ == 4) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(
            4, (boolean)((java.lang.Boolean) requirement_));
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.authzed.api.v1.Consistency)) {
      return super.equals(obj);
    }
    com.authzed.api.v1.Consistency other = (com.authzed.api.v1.Consistency) obj;

    if (!getRequirementCase().equals(other.getRequirementCase())) return false;
    switch (requirementCase_) {
      case 1:
        if (getMinimizeLatency()
            != other.getMinimizeLatency()) return false;
        break;
      case 2:
        if (!getAtLeastAsFresh()
            .equals(other.getAtLeastAsFresh())) return false;
        break;
      case 3:
        if (!getAtExactSnapshot()
            .equals(other.getAtExactSnapshot())) return false;
        break;
      case 4:
        if (getFullyConsistent()
            != other.getFullyConsistent()) return false;
        break;
      case 0:
      default:
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    switch (requirementCase_) {
      case 1:
        hash = (37 * hash) + MINIMIZE_LATENCY_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getMinimizeLatency());
        break;
      case 2:
        hash = (37 * hash) + AT_LEAST_AS_FRESH_FIELD_NUMBER;
        hash = (53 * hash) + getAtLeastAsFresh().hashCode();
        break;
      case 3:
        hash = (37 * hash) + AT_EXACT_SNAPSHOT_FIELD_NUMBER;
        hash = (53 * hash) + getAtExactSnapshot().hashCode();
        break;
      case 4:
        hash = (37 * hash) + FULLY_CONSISTENT_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getFullyConsistent());
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.authzed.api.v1.Consistency parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.authzed.api.v1.Consistency parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.authzed.api.v1.Consistency parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.authzed.api.v1.Consistency parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.authzed.api.v1.Consistency parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.authzed.api.v1.Consistency parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.authzed.api.v1.Consistency parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.authzed.api.v1.Consistency parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.authzed.api.v1.Consistency parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.authzed.api.v1.Consistency parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.authzed.api.v1.Consistency parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.authzed.api.v1.Consistency parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.authzed.api.v1.Consistency prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Consistency will define how a request is handled by the backend.
   * By defining a consistency requirement, and a token at which those
   * requirements should be applied, where applicable.
   * </pre>
   *
   * Protobuf type {@code authzed.api.v1.Consistency}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:authzed.api.v1.Consistency)
      com.authzed.api.v1.ConsistencyOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.authzed.api.v1.PermissionService.internal_static_authzed_api_v1_Consistency_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.authzed.api.v1.PermissionService.internal_static_authzed_api_v1_Consistency_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.authzed.api.v1.Consistency.class, com.authzed.api.v1.Consistency.Builder.class);
    }

    // Construct using com.authzed.api.v1.Consistency.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      if (atLeastAsFreshBuilder_ != null) {
        atLeastAsFreshBuilder_.clear();
      }
      if (atExactSnapshotBuilder_ != null) {
        atExactSnapshotBuilder_.clear();
      }
      requirementCase_ = 0;
      requirement_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.authzed.api.v1.PermissionService.internal_static_authzed_api_v1_Consistency_descriptor;
    }

    @java.lang.Override
    public com.authzed.api.v1.Consistency getDefaultInstanceForType() {
      return com.authzed.api.v1.Consistency.getDefaultInstance();
    }

    @java.lang.Override
    public com.authzed.api.v1.Consistency build() {
      com.authzed.api.v1.Consistency result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.authzed.api.v1.Consistency buildPartial() {
      com.authzed.api.v1.Consistency result = new com.authzed.api.v1.Consistency(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      buildPartialOneofs(result);
      onBuilt();
      return result;
    }

    private void buildPartial0(com.authzed.api.v1.Consistency result) {
      int from_bitField0_ = bitField0_;
    }

    private void buildPartialOneofs(com.authzed.api.v1.Consistency result) {
      result.requirementCase_ = requirementCase_;
      result.requirement_ = this.requirement_;
      if (requirementCase_ == 2 &&
          atLeastAsFreshBuilder_ != null) {
        result.requirement_ = atLeastAsFreshBuilder_.build();
      }
      if (requirementCase_ == 3 &&
          atExactSnapshotBuilder_ != null) {
        result.requirement_ = atExactSnapshotBuilder_.build();
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.authzed.api.v1.Consistency) {
        return mergeFrom((com.authzed.api.v1.Consistency)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.authzed.api.v1.Consistency other) {
      if (other == com.authzed.api.v1.Consistency.getDefaultInstance()) return this;
      switch (other.getRequirementCase()) {
        case MINIMIZE_LATENCY: {
          setMinimizeLatency(other.getMinimizeLatency());
          break;
        }
        case AT_LEAST_AS_FRESH: {
          mergeAtLeastAsFresh(other.getAtLeastAsFresh());
          break;
        }
        case AT_EXACT_SNAPSHOT: {
          mergeAtExactSnapshot(other.getAtExactSnapshot());
          break;
        }
        case FULLY_CONSISTENT: {
          setFullyConsistent(other.getFullyConsistent());
          break;
        }
        case REQUIREMENT_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              requirement_ = input.readBool();
              requirementCase_ = 1;
              break;
            } // case 8
            case 18: {
              input.readMessage(
                  getAtLeastAsFreshFieldBuilder().getBuilder(),
                  extensionRegistry);
              requirementCase_ = 2;
              break;
            } // case 18
            case 26: {
              input.readMessage(
                  getAtExactSnapshotFieldBuilder().getBuilder(),
                  extensionRegistry);
              requirementCase_ = 3;
              break;
            } // case 26
            case 32: {
              requirement_ = input.readBool();
              requirementCase_ = 4;
              break;
            } // case 32
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int requirementCase_ = 0;
    private java.lang.Object requirement_;
    public RequirementCase
        getRequirementCase() {
      return RequirementCase.forNumber(
          requirementCase_);
    }

    public Builder clearRequirement() {
      requirementCase_ = 0;
      requirement_ = null;
      onChanged();
      return this;
    }

    private int bitField0_;

    /**
     * <pre>
     * minimize_latency indicates that the latency for the call should be
     * minimized by having the system select the fastest snapshot available.
     * </pre>
     *
     * <code>bool minimize_latency = 1 [json_name = "minimizeLatency", (.validate.rules) = { ... }</code>
     * @return Whether the minimizeLatency field is set.
     */
    public boolean hasMinimizeLatency() {
      return requirementCase_ == 1;
    }
    /**
     * <pre>
     * minimize_latency indicates that the latency for the call should be
     * minimized by having the system select the fastest snapshot available.
     * </pre>
     *
     * <code>bool minimize_latency = 1 [json_name = "minimizeLatency", (.validate.rules) = { ... }</code>
     * @return The minimizeLatency.
     */
    public boolean getMinimizeLatency() {
      if (requirementCase_ == 1) {
        return (java.lang.Boolean) requirement_;
      }
      return false;
    }
    /**
     * <pre>
     * minimize_latency indicates that the latency for the call should be
     * minimized by having the system select the fastest snapshot available.
     * </pre>
     *
     * <code>bool minimize_latency = 1 [json_name = "minimizeLatency", (.validate.rules) = { ... }</code>
     * @param value The minimizeLatency to set.
     * @return This builder for chaining.
     */
    public Builder setMinimizeLatency(boolean value) {
      
      requirementCase_ = 1;
      requirement_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * minimize_latency indicates that the latency for the call should be
     * minimized by having the system select the fastest snapshot available.
     * </pre>
     *
     * <code>bool minimize_latency = 1 [json_name = "minimizeLatency", (.validate.rules) = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearMinimizeLatency() {
      if (requirementCase_ == 1) {
        requirementCase_ = 0;
        requirement_ = null;
        onChanged();
      }
      return this;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.authzed.api.v1.ZedToken, com.authzed.api.v1.ZedToken.Builder, com.authzed.api.v1.ZedTokenOrBuilder> atLeastAsFreshBuilder_;
    /**
     * <pre>
     * at_least_as_fresh indicates that all data used in the API call must be
     * *at least as fresh* as that found in the ZedToken; more recent data might
     * be used if available or faster.
     * </pre>
     *
     * <code>.authzed.api.v1.ZedToken at_least_as_fresh = 2 [json_name = "atLeastAsFresh"];</code>
     * @return Whether the atLeastAsFresh field is set.
     */
    @java.lang.Override
    public boolean hasAtLeastAsFresh() {
      return requirementCase_ == 2;
    }
    /**
     * <pre>
     * at_least_as_fresh indicates that all data used in the API call must be
     * *at least as fresh* as that found in the ZedToken; more recent data might
     * be used if available or faster.
     * </pre>
     *
     * <code>.authzed.api.v1.ZedToken at_least_as_fresh = 2 [json_name = "atLeastAsFresh"];</code>
     * @return The atLeastAsFresh.
     */
    @java.lang.Override
    public com.authzed.api.v1.ZedToken getAtLeastAsFresh() {
      if (atLeastAsFreshBuilder_ == null) {
        if (requirementCase_ == 2) {
          return (com.authzed.api.v1.ZedToken) requirement_;
        }
        return com.authzed.api.v1.ZedToken.getDefaultInstance();
      } else {
        if (requirementCase_ == 2) {
          return atLeastAsFreshBuilder_.getMessage();
        }
        return com.authzed.api.v1.ZedToken.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * at_least_as_fresh indicates that all data used in the API call must be
     * *at least as fresh* as that found in the ZedToken; more recent data might
     * be used if available or faster.
     * </pre>
     *
     * <code>.authzed.api.v1.ZedToken at_least_as_fresh = 2 [json_name = "atLeastAsFresh"];</code>
     */
    public Builder setAtLeastAsFresh(com.authzed.api.v1.ZedToken value) {
      if (atLeastAsFreshBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        requirement_ = value;
        onChanged();
      } else {
        atLeastAsFreshBuilder_.setMessage(value);
      }
      requirementCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * at_least_as_fresh indicates that all data used in the API call must be
     * *at least as fresh* as that found in the ZedToken; more recent data might
     * be used if available or faster.
     * </pre>
     *
     * <code>.authzed.api.v1.ZedToken at_least_as_fresh = 2 [json_name = "atLeastAsFresh"];</code>
     */
    public Builder setAtLeastAsFresh(
        com.authzed.api.v1.ZedToken.Builder builderForValue) {
      if (atLeastAsFreshBuilder_ == null) {
        requirement_ = builderForValue.build();
        onChanged();
      } else {
        atLeastAsFreshBuilder_.setMessage(builderForValue.build());
      }
      requirementCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * at_least_as_fresh indicates that all data used in the API call must be
     * *at least as fresh* as that found in the ZedToken; more recent data might
     * be used if available or faster.
     * </pre>
     *
     * <code>.authzed.api.v1.ZedToken at_least_as_fresh = 2 [json_name = "atLeastAsFresh"];</code>
     */
    public Builder mergeAtLeastAsFresh(com.authzed.api.v1.ZedToken value) {
      if (atLeastAsFreshBuilder_ == null) {
        if (requirementCase_ == 2 &&
            requirement_ != com.authzed.api.v1.ZedToken.getDefaultInstance()) {
          requirement_ = com.authzed.api.v1.ZedToken.newBuilder((com.authzed.api.v1.ZedToken) requirement_)
              .mergeFrom(value).buildPartial();
        } else {
          requirement_ = value;
        }
        onChanged();
      } else {
        if (requirementCase_ == 2) {
          atLeastAsFreshBuilder_.mergeFrom(value);
        } else {
          atLeastAsFreshBuilder_.setMessage(value);
        }
      }
      requirementCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * at_least_as_fresh indicates that all data used in the API call must be
     * *at least as fresh* as that found in the ZedToken; more recent data might
     * be used if available or faster.
     * </pre>
     *
     * <code>.authzed.api.v1.ZedToken at_least_as_fresh = 2 [json_name = "atLeastAsFresh"];</code>
     */
    public Builder clearAtLeastAsFresh() {
      if (atLeastAsFreshBuilder_ == null) {
        if (requirementCase_ == 2) {
          requirementCase_ = 0;
          requirement_ = null;
          onChanged();
        }
      } else {
        if (requirementCase_ == 2) {
          requirementCase_ = 0;
          requirement_ = null;
        }
        atLeastAsFreshBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * at_least_as_fresh indicates that all data used in the API call must be
     * *at least as fresh* as that found in the ZedToken; more recent data might
     * be used if available or faster.
     * </pre>
     *
     * <code>.authzed.api.v1.ZedToken at_least_as_fresh = 2 [json_name = "atLeastAsFresh"];</code>
     */
    public com.authzed.api.v1.ZedToken.Builder getAtLeastAsFreshBuilder() {
      return getAtLeastAsFreshFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * at_least_as_fresh indicates that all data used in the API call must be
     * *at least as fresh* as that found in the ZedToken; more recent data might
     * be used if available or faster.
     * </pre>
     *
     * <code>.authzed.api.v1.ZedToken at_least_as_fresh = 2 [json_name = "atLeastAsFresh"];</code>
     */
    @java.lang.Override
    public com.authzed.api.v1.ZedTokenOrBuilder getAtLeastAsFreshOrBuilder() {
      if ((requirementCase_ == 2) && (atLeastAsFreshBuilder_ != null)) {
        return atLeastAsFreshBuilder_.getMessageOrBuilder();
      } else {
        if (requirementCase_ == 2) {
          return (com.authzed.api.v1.ZedToken) requirement_;
        }
        return com.authzed.api.v1.ZedToken.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * at_least_as_fresh indicates that all data used in the API call must be
     * *at least as fresh* as that found in the ZedToken; more recent data might
     * be used if available or faster.
     * </pre>
     *
     * <code>.authzed.api.v1.ZedToken at_least_as_fresh = 2 [json_name = "atLeastAsFresh"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.authzed.api.v1.ZedToken, com.authzed.api.v1.ZedToken.Builder, com.authzed.api.v1.ZedTokenOrBuilder> 
        getAtLeastAsFreshFieldBuilder() {
      if (atLeastAsFreshBuilder_ == null) {
        if (!(requirementCase_ == 2)) {
          requirement_ = com.authzed.api.v1.ZedToken.getDefaultInstance();
        }
        atLeastAsFreshBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.authzed.api.v1.ZedToken, com.authzed.api.v1.ZedToken.Builder, com.authzed.api.v1.ZedTokenOrBuilder>(
                (com.authzed.api.v1.ZedToken) requirement_,
                getParentForChildren(),
                isClean());
        requirement_ = null;
      }
      requirementCase_ = 2;
      onChanged();
      return atLeastAsFreshBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.authzed.api.v1.ZedToken, com.authzed.api.v1.ZedToken.Builder, com.authzed.api.v1.ZedTokenOrBuilder> atExactSnapshotBuilder_;
    /**
     * <pre>
     * at_exact_snapshot indicates that all data used in the API call must be
     * *at the given* snapshot in time; if the snapshot is no longer available,
     * an error will be returned to the caller.
     * </pre>
     *
     * <code>.authzed.api.v1.ZedToken at_exact_snapshot = 3 [json_name = "atExactSnapshot"];</code>
     * @return Whether the atExactSnapshot field is set.
     */
    @java.lang.Override
    public boolean hasAtExactSnapshot() {
      return requirementCase_ == 3;
    }
    /**
     * <pre>
     * at_exact_snapshot indicates that all data used in the API call must be
     * *at the given* snapshot in time; if the snapshot is no longer available,
     * an error will be returned to the caller.
     * </pre>
     *
     * <code>.authzed.api.v1.ZedToken at_exact_snapshot = 3 [json_name = "atExactSnapshot"];</code>
     * @return The atExactSnapshot.
     */
    @java.lang.Override
    public com.authzed.api.v1.ZedToken getAtExactSnapshot() {
      if (atExactSnapshotBuilder_ == null) {
        if (requirementCase_ == 3) {
          return (com.authzed.api.v1.ZedToken) requirement_;
        }
        return com.authzed.api.v1.ZedToken.getDefaultInstance();
      } else {
        if (requirementCase_ == 3) {
          return atExactSnapshotBuilder_.getMessage();
        }
        return com.authzed.api.v1.ZedToken.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * at_exact_snapshot indicates that all data used in the API call must be
     * *at the given* snapshot in time; if the snapshot is no longer available,
     * an error will be returned to the caller.
     * </pre>
     *
     * <code>.authzed.api.v1.ZedToken at_exact_snapshot = 3 [json_name = "atExactSnapshot"];</code>
     */
    public Builder setAtExactSnapshot(com.authzed.api.v1.ZedToken value) {
      if (atExactSnapshotBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        requirement_ = value;
        onChanged();
      } else {
        atExactSnapshotBuilder_.setMessage(value);
      }
      requirementCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * at_exact_snapshot indicates that all data used in the API call must be
     * *at the given* snapshot in time; if the snapshot is no longer available,
     * an error will be returned to the caller.
     * </pre>
     *
     * <code>.authzed.api.v1.ZedToken at_exact_snapshot = 3 [json_name = "atExactSnapshot"];</code>
     */
    public Builder setAtExactSnapshot(
        com.authzed.api.v1.ZedToken.Builder builderForValue) {
      if (atExactSnapshotBuilder_ == null) {
        requirement_ = builderForValue.build();
        onChanged();
      } else {
        atExactSnapshotBuilder_.setMessage(builderForValue.build());
      }
      requirementCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * at_exact_snapshot indicates that all data used in the API call must be
     * *at the given* snapshot in time; if the snapshot is no longer available,
     * an error will be returned to the caller.
     * </pre>
     *
     * <code>.authzed.api.v1.ZedToken at_exact_snapshot = 3 [json_name = "atExactSnapshot"];</code>
     */
    public Builder mergeAtExactSnapshot(com.authzed.api.v1.ZedToken value) {
      if (atExactSnapshotBuilder_ == null) {
        if (requirementCase_ == 3 &&
            requirement_ != com.authzed.api.v1.ZedToken.getDefaultInstance()) {
          requirement_ = com.authzed.api.v1.ZedToken.newBuilder((com.authzed.api.v1.ZedToken) requirement_)
              .mergeFrom(value).buildPartial();
        } else {
          requirement_ = value;
        }
        onChanged();
      } else {
        if (requirementCase_ == 3) {
          atExactSnapshotBuilder_.mergeFrom(value);
        } else {
          atExactSnapshotBuilder_.setMessage(value);
        }
      }
      requirementCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * at_exact_snapshot indicates that all data used in the API call must be
     * *at the given* snapshot in time; if the snapshot is no longer available,
     * an error will be returned to the caller.
     * </pre>
     *
     * <code>.authzed.api.v1.ZedToken at_exact_snapshot = 3 [json_name = "atExactSnapshot"];</code>
     */
    public Builder clearAtExactSnapshot() {
      if (atExactSnapshotBuilder_ == null) {
        if (requirementCase_ == 3) {
          requirementCase_ = 0;
          requirement_ = null;
          onChanged();
        }
      } else {
        if (requirementCase_ == 3) {
          requirementCase_ = 0;
          requirement_ = null;
        }
        atExactSnapshotBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * at_exact_snapshot indicates that all data used in the API call must be
     * *at the given* snapshot in time; if the snapshot is no longer available,
     * an error will be returned to the caller.
     * </pre>
     *
     * <code>.authzed.api.v1.ZedToken at_exact_snapshot = 3 [json_name = "atExactSnapshot"];</code>
     */
    public com.authzed.api.v1.ZedToken.Builder getAtExactSnapshotBuilder() {
      return getAtExactSnapshotFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * at_exact_snapshot indicates that all data used in the API call must be
     * *at the given* snapshot in time; if the snapshot is no longer available,
     * an error will be returned to the caller.
     * </pre>
     *
     * <code>.authzed.api.v1.ZedToken at_exact_snapshot = 3 [json_name = "atExactSnapshot"];</code>
     */
    @java.lang.Override
    public com.authzed.api.v1.ZedTokenOrBuilder getAtExactSnapshotOrBuilder() {
      if ((requirementCase_ == 3) && (atExactSnapshotBuilder_ != null)) {
        return atExactSnapshotBuilder_.getMessageOrBuilder();
      } else {
        if (requirementCase_ == 3) {
          return (com.authzed.api.v1.ZedToken) requirement_;
        }
        return com.authzed.api.v1.ZedToken.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * at_exact_snapshot indicates that all data used in the API call must be
     * *at the given* snapshot in time; if the snapshot is no longer available,
     * an error will be returned to the caller.
     * </pre>
     *
     * <code>.authzed.api.v1.ZedToken at_exact_snapshot = 3 [json_name = "atExactSnapshot"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.authzed.api.v1.ZedToken, com.authzed.api.v1.ZedToken.Builder, com.authzed.api.v1.ZedTokenOrBuilder> 
        getAtExactSnapshotFieldBuilder() {
      if (atExactSnapshotBuilder_ == null) {
        if (!(requirementCase_ == 3)) {
          requirement_ = com.authzed.api.v1.ZedToken.getDefaultInstance();
        }
        atExactSnapshotBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.authzed.api.v1.ZedToken, com.authzed.api.v1.ZedToken.Builder, com.authzed.api.v1.ZedTokenOrBuilder>(
                (com.authzed.api.v1.ZedToken) requirement_,
                getParentForChildren(),
                isClean());
        requirement_ = null;
      }
      requirementCase_ = 3;
      onChanged();
      return atExactSnapshotBuilder_;
    }

    /**
     * <pre>
     * fully_consistent indicates that all data used in the API call *must* be
     * at the most recent snapshot found.
     * NOTE: using this method can be *quite slow*, so unless there is a need to
     * do so, it is recommended to use `at_least_as_fresh` with a stored
     * ZedToken.
     * </pre>
     *
     * <code>bool fully_consistent = 4 [json_name = "fullyConsistent", (.validate.rules) = { ... }</code>
     * @return Whether the fullyConsistent field is set.
     */
    public boolean hasFullyConsistent() {
      return requirementCase_ == 4;
    }
    /**
     * <pre>
     * fully_consistent indicates that all data used in the API call *must* be
     * at the most recent snapshot found.
     * NOTE: using this method can be *quite slow*, so unless there is a need to
     * do so, it is recommended to use `at_least_as_fresh` with a stored
     * ZedToken.
     * </pre>
     *
     * <code>bool fully_consistent = 4 [json_name = "fullyConsistent", (.validate.rules) = { ... }</code>
     * @return The fullyConsistent.
     */
    public boolean getFullyConsistent() {
      if (requirementCase_ == 4) {
        return (java.lang.Boolean) requirement_;
      }
      return false;
    }
    /**
     * <pre>
     * fully_consistent indicates that all data used in the API call *must* be
     * at the most recent snapshot found.
     * NOTE: using this method can be *quite slow*, so unless there is a need to
     * do so, it is recommended to use `at_least_as_fresh` with a stored
     * ZedToken.
     * </pre>
     *
     * <code>bool fully_consistent = 4 [json_name = "fullyConsistent", (.validate.rules) = { ... }</code>
     * @param value The fullyConsistent to set.
     * @return This builder for chaining.
     */
    public Builder setFullyConsistent(boolean value) {
      
      requirementCase_ = 4;
      requirement_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * fully_consistent indicates that all data used in the API call *must* be
     * at the most recent snapshot found.
     * NOTE: using this method can be *quite slow*, so unless there is a need to
     * do so, it is recommended to use `at_least_as_fresh` with a stored
     * ZedToken.
     * </pre>
     *
     * <code>bool fully_consistent = 4 [json_name = "fullyConsistent", (.validate.rules) = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearFullyConsistent() {
      if (requirementCase_ == 4) {
        requirementCase_ = 0;
        requirement_ = null;
        onChanged();
      }
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:authzed.api.v1.Consistency)
  }

  // @@protoc_insertion_point(class_scope:authzed.api.v1.Consistency)
  private static final com.authzed.api.v1.Consistency DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.authzed.api.v1.Consistency();
  }

  public static com.authzed.api.v1.Consistency getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Consistency>
      PARSER = new com.google.protobuf.AbstractParser<Consistency>() {
    @java.lang.Override
    public Consistency parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<Consistency> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Consistency> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.authzed.api.v1.Consistency getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

