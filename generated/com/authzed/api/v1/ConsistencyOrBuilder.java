// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: authzed/api/v1/permission_service.proto

package com.authzed.api.v1;

public interface ConsistencyOrBuilder extends
    // @@protoc_insertion_point(interface_extends:authzed.api.v1.Consistency)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * minimize_latency indicates that the latency for the call should be
   * minimized by having the system select the fastest snapshot available.
   * </pre>
   *
   * <code>bool minimize_latency = 1 [json_name = "minimizeLatency", (.validate.rules) = { ... }</code>
   * @return Whether the minimizeLatency field is set.
   */
  boolean hasMinimizeLatency();
  /**
   * <pre>
   * minimize_latency indicates that the latency for the call should be
   * minimized by having the system select the fastest snapshot available.
   * </pre>
   *
   * <code>bool minimize_latency = 1 [json_name = "minimizeLatency", (.validate.rules) = { ... }</code>
   * @return The minimizeLatency.
   */
  boolean getMinimizeLatency();

  /**
   * <pre>
   * at_least_as_fresh indicates that all data used in the API call must be
   * *at least as fresh* as that found in the ZedToken; more recent data might
   * be used if available or faster.
   * </pre>
   *
   * <code>.authzed.api.v1.ZedToken at_least_as_fresh = 2 [json_name = "atLeastAsFresh"];</code>
   * @return Whether the atLeastAsFresh field is set.
   */
  boolean hasAtLeastAsFresh();
  /**
   * <pre>
   * at_least_as_fresh indicates that all data used in the API call must be
   * *at least as fresh* as that found in the ZedToken; more recent data might
   * be used if available or faster.
   * </pre>
   *
   * <code>.authzed.api.v1.ZedToken at_least_as_fresh = 2 [json_name = "atLeastAsFresh"];</code>
   * @return The atLeastAsFresh.
   */
  com.authzed.api.v1.ZedToken getAtLeastAsFresh();
  /**
   * <pre>
   * at_least_as_fresh indicates that all data used in the API call must be
   * *at least as fresh* as that found in the ZedToken; more recent data might
   * be used if available or faster.
   * </pre>
   *
   * <code>.authzed.api.v1.ZedToken at_least_as_fresh = 2 [json_name = "atLeastAsFresh"];</code>
   */
  com.authzed.api.v1.ZedTokenOrBuilder getAtLeastAsFreshOrBuilder();

  /**
   * <pre>
   * at_exact_snapshot indicates that all data used in the API call must be
   * *at the given* snapshot in time; if the snapshot is no longer available,
   * an error will be returned to the caller.
   * </pre>
   *
   * <code>.authzed.api.v1.ZedToken at_exact_snapshot = 3 [json_name = "atExactSnapshot"];</code>
   * @return Whether the atExactSnapshot field is set.
   */
  boolean hasAtExactSnapshot();
  /**
   * <pre>
   * at_exact_snapshot indicates that all data used in the API call must be
   * *at the given* snapshot in time; if the snapshot is no longer available,
   * an error will be returned to the caller.
   * </pre>
   *
   * <code>.authzed.api.v1.ZedToken at_exact_snapshot = 3 [json_name = "atExactSnapshot"];</code>
   * @return The atExactSnapshot.
   */
  com.authzed.api.v1.ZedToken getAtExactSnapshot();
  /**
   * <pre>
   * at_exact_snapshot indicates that all data used in the API call must be
   * *at the given* snapshot in time; if the snapshot is no longer available,
   * an error will be returned to the caller.
   * </pre>
   *
   * <code>.authzed.api.v1.ZedToken at_exact_snapshot = 3 [json_name = "atExactSnapshot"];</code>
   */
  com.authzed.api.v1.ZedTokenOrBuilder getAtExactSnapshotOrBuilder();

  /**
   * <pre>
   * fully_consistent indicates that all data used in the API call *must* be
   * at the most recent snapshot found.
   * NOTE: using this method can be *quite slow*, so unless there is a need to
   * do so, it is recommended to use `at_least_as_fresh` with a stored
   * ZedToken.
   * </pre>
   *
   * <code>bool fully_consistent = 4 [json_name = "fullyConsistent", (.validate.rules) = { ... }</code>
   * @return Whether the fullyConsistent field is set.
   */
  boolean hasFullyConsistent();
  /**
   * <pre>
   * fully_consistent indicates that all data used in the API call *must* be
   * at the most recent snapshot found.
   * NOTE: using this method can be *quite slow*, so unless there is a need to
   * do so, it is recommended to use `at_least_as_fresh` with a stored
   * ZedToken.
   * </pre>
   *
   * <code>bool fully_consistent = 4 [json_name = "fullyConsistent", (.validate.rules) = { ... }</code>
   * @return The fullyConsistent.
   */
  boolean getFullyConsistent();

  public com.authzed.api.v1.Consistency.RequirementCase getRequirementCase();
}
