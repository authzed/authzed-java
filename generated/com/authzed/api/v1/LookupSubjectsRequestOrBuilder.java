// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: authzed/api/v1/permission_service.proto

package com.authzed.api.v1;

public interface LookupSubjectsRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:authzed.api.v1.LookupSubjectsRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>.authzed.api.v1.Consistency consistency = 1 [json_name = "consistency"];</code>
   * @return Whether the consistency field is set.
   */
  boolean hasConsistency();
  /**
   * <code>.authzed.api.v1.Consistency consistency = 1 [json_name = "consistency"];</code>
   * @return The consistency.
   */
  com.authzed.api.v1.Consistency getConsistency();
  /**
   * <code>.authzed.api.v1.Consistency consistency = 1 [json_name = "consistency"];</code>
   */
  com.authzed.api.v1.ConsistencyOrBuilder getConsistencyOrBuilder();

  /**
   * <pre>
   * resource is the resource for which all matching subjects for the permission
   * or relation will be returned.
   * </pre>
   *
   * <code>.authzed.api.v1.ObjectReference resource = 2 [json_name = "resource", (.validate.rules) = { ... }</code>
   * @return Whether the resource field is set.
   */
  boolean hasResource();
  /**
   * <pre>
   * resource is the resource for which all matching subjects for the permission
   * or relation will be returned.
   * </pre>
   *
   * <code>.authzed.api.v1.ObjectReference resource = 2 [json_name = "resource", (.validate.rules) = { ... }</code>
   * @return The resource.
   */
  com.authzed.api.v1.ObjectReference getResource();
  /**
   * <pre>
   * resource is the resource for which all matching subjects for the permission
   * or relation will be returned.
   * </pre>
   *
   * <code>.authzed.api.v1.ObjectReference resource = 2 [json_name = "resource", (.validate.rules) = { ... }</code>
   */
  com.authzed.api.v1.ObjectReferenceOrBuilder getResourceOrBuilder();

  /**
   * <pre>
   * permission is the name of the permission (or relation) for which to find
   * the subjects.
   * </pre>
   *
   * <code>string permission = 3 [json_name = "permission", (.validate.rules) = { ... }</code>
   * @return The permission.
   */
  java.lang.String getPermission();
  /**
   * <pre>
   * permission is the name of the permission (or relation) for which to find
   * the subjects.
   * </pre>
   *
   * <code>string permission = 3 [json_name = "permission", (.validate.rules) = { ... }</code>
   * @return The bytes for permission.
   */
  com.google.protobuf.ByteString
      getPermissionBytes();

  /**
   * <pre>
   * subject_object_type is the type of subject object for which the IDs will
   * be returned.
   * </pre>
   *
   * <code>string subject_object_type = 4 [json_name = "subjectObjectType", (.validate.rules) = { ... }</code>
   * @return The subjectObjectType.
   */
  java.lang.String getSubjectObjectType();
  /**
   * <pre>
   * subject_object_type is the type of subject object for which the IDs will
   * be returned.
   * </pre>
   *
   * <code>string subject_object_type = 4 [json_name = "subjectObjectType", (.validate.rules) = { ... }</code>
   * @return The bytes for subjectObjectType.
   */
  com.google.protobuf.ByteString
      getSubjectObjectTypeBytes();

  /**
   * <pre>
   * optional_subject_relation is the optional relation for the subject.
   * </pre>
   *
   * <code>string optional_subject_relation = 5 [json_name = "optionalSubjectRelation", (.validate.rules) = { ... }</code>
   * @return The optionalSubjectRelation.
   */
  java.lang.String getOptionalSubjectRelation();
  /**
   * <pre>
   * optional_subject_relation is the optional relation for the subject.
   * </pre>
   *
   * <code>string optional_subject_relation = 5 [json_name = "optionalSubjectRelation", (.validate.rules) = { ... }</code>
   * @return The bytes for optionalSubjectRelation.
   */
  com.google.protobuf.ByteString
      getOptionalSubjectRelationBytes();

  /**
   * <pre>
   * context consists of named values that are injected into the caveat evaluation context
   * </pre>
   *
   * <code>.google.protobuf.Struct context = 6 [json_name = "context", (.validate.rules) = { ... }</code>
   * @return Whether the context field is set.
   */
  boolean hasContext();
  /**
   * <pre>
   * context consists of named values that are injected into the caveat evaluation context
   * </pre>
   *
   * <code>.google.protobuf.Struct context = 6 [json_name = "context", (.validate.rules) = { ... }</code>
   * @return The context.
   */
  com.google.protobuf.Struct getContext();
  /**
   * <pre>
   * context consists of named values that are injected into the caveat evaluation context
   * </pre>
   *
   * <code>.google.protobuf.Struct context = 6 [json_name = "context", (.validate.rules) = { ... }</code>
   */
  com.google.protobuf.StructOrBuilder getContextOrBuilder();

  /**
   * <pre>
   * optional_concrete_limit, if non-zero, specifies the limit on the number of
   * *concrete* (non-wildcard) subjects to return before the stream is closed on the
   * server side. With the default value of zero, the stream will continue resolving
   * concrete subjects until exhausted or the stream is closed due to the client or
   * a network issue.
   * NOTE: Wildcard subjects ("*") have special treatment when cursors and limits are used. Because
   * wildcards can apply to *any* concrete subjects, if a wildcard subject is found within the dataset,
   * a wildcard subject can be returned for *all* LookupSubjects calls, regardless of the cursor or
   * limit.
   * For example, if wildcards are requested, a wildcard subject exists, there is a specified limit
   * of 10 concrete subjects, and at least 10 concrete subjects exist, the API will return 11 subjects
   * in total: the 10 concrete + the wildcard
   * Furthermore, if a wildcard has a set of exclusions generated by the dataset,
   * the exclusions *will respect the cursor* and only a *partial* set of exclusions will be returned
   * for each invocation of the API.
   * ***IT IS UP TO THE CALLER IN THIS CASE TO COMBINE THE EXCLUSIONS IF DESIRED***
   * </pre>
   *
   * <code>uint32 optional_concrete_limit = 7 [json_name = "optionalConcreteLimit", (.validate.rules) = { ... }</code>
   * @return The optionalConcreteLimit.
   */
  int getOptionalConcreteLimit();

  /**
   * <pre>
   * optional_cursor, if specified, indicates the cursor after which results should resume being returned.
   * The cursor can be found on the LookupSubjectsResponse object.
   * NOTE: See above for notes about how cursors interact with wildcard subjects.
   * </pre>
   *
   * <code>.authzed.api.v1.Cursor optional_cursor = 8 [json_name = "optionalCursor"];</code>
   * @return Whether the optionalCursor field is set.
   */
  boolean hasOptionalCursor();
  /**
   * <pre>
   * optional_cursor, if specified, indicates the cursor after which results should resume being returned.
   * The cursor can be found on the LookupSubjectsResponse object.
   * NOTE: See above for notes about how cursors interact with wildcard subjects.
   * </pre>
   *
   * <code>.authzed.api.v1.Cursor optional_cursor = 8 [json_name = "optionalCursor"];</code>
   * @return The optionalCursor.
   */
  com.authzed.api.v1.Cursor getOptionalCursor();
  /**
   * <pre>
   * optional_cursor, if specified, indicates the cursor after which results should resume being returned.
   * The cursor can be found on the LookupSubjectsResponse object.
   * NOTE: See above for notes about how cursors interact with wildcard subjects.
   * </pre>
   *
   * <code>.authzed.api.v1.Cursor optional_cursor = 8 [json_name = "optionalCursor"];</code>
   */
  com.authzed.api.v1.CursorOrBuilder getOptionalCursorOrBuilder();

  /**
   * <pre>
   * wildcard_option specifies whether wildcards should be returned by LookupSubjects.
   * For backwards compatibility, defaults to WILDCARD_OPTION_INCLUDE_WILDCARDS if unspecified.
   * </pre>
   *
   * <code>.authzed.api.v1.LookupSubjectsRequest.WildcardOption wildcard_option = 9 [json_name = "wildcardOption"];</code>
   * @return The enum numeric value on the wire for wildcardOption.
   */
  int getWildcardOptionValue();
  /**
   * <pre>
   * wildcard_option specifies whether wildcards should be returned by LookupSubjects.
   * For backwards compatibility, defaults to WILDCARD_OPTION_INCLUDE_WILDCARDS if unspecified.
   * </pre>
   *
   * <code>.authzed.api.v1.LookupSubjectsRequest.WildcardOption wildcard_option = 9 [json_name = "wildcardOption"];</code>
   * @return The wildcardOption.
   */
  com.authzed.api.v1.LookupSubjectsRequest.WildcardOption getWildcardOption();
}
