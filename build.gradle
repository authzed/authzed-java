plugins {
  id "org.jetbrains.kotlin.jvm" version "1.7.20"
  id "java-library"
  id "maven-publish"

  id "com.google.protobuf" version "0.8.19"
}

repositories {
  // The Google mirror is less flaky than mavenCentral()
  maven { url "https://maven-central.storage-download.googleapis.com/maven2/" }
  mavenCentral()
  mavenLocal()
}

group = "com.bridge.authzed.api"
version = findProperty("release") ?: "0.0.0-SNAPSHOT"

publishing {
  publications { authzed(MavenPublication) {
    from components.java
    pom {
      name = "authzed"
      description = "Authzed client library for Java"
      url = "https://github.com/authzed/authzed-java"
      licenses { license {
          name = "The Apache License, Version 2.0"
          url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
      }}
      developers { developer {
        id = "jzelinskie"
        name = "Jimmy Zelinskie"
        email = "jimmy@authzed.com"
      }}
      scm {
        connection = "scm:git:git://github.com/authzed/authzed-java.git"
        developerConnection = "scm:git:ssh://github.com:authzed/authzed-java.git"
        url = "https://github.com/authzed/authzed-java/tree/master"
      }
    }
  }}

  repositories {
    maven {
      name = "GitHubPackages"
      url = "https://maven.pkg.github.com/get-bridge/authzed-java"
      credentials {
        username = System.getenv("GITHUB_ACTOR")
        password = System.getenv("GITHUB_TOKEN")
      }
    }
  }
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

java {
  withJavadocJar()
  withSourcesJar()
}

// All it does is complain about generated code.
javadoc { options.addStringOption('Xdoclint:none', '-quiet') }

def grpcVersion = '1.49.1'
def grpcKtVersion = '1.3.0'
def protocVersion = "3.17.3"
def authzedProtoCommit = "c9dc57b6f25666952f736f5b3ba621397b5e09a3"
def bufDir = "${buildDir}/buf"
def protocPlatformTag = project.findProperty('protoc_platform') ? ":${protoc_platform}" : ""

sourceSets { main {
  proto { srcDir bufDir }
  java  { srcDir "$buildDir/generated" }
  java  { srcDir "$buildDir/src" }
}}

dependencies {
  implementation("com.google.protobuf:protobuf-java:3.21.7")
  implementation("com.google.protobuf:protobuf-kotlin:3.21.6")
  implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm:1.6.4")
  implementation "io.grpc:grpc-protobuf:${grpcVersion}"
  implementation "io.grpc:grpc-stub:${grpcVersion}"
  implementation "io.grpc:grpc-kotlin-stub:${grpcKtVersion}"
  runtimeOnly "io.grpc:grpc-netty-shaded:${grpcVersion}"
  compileOnly "org.apache.tomcat:annotations-api:6.0.53"
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
  kotlinOptions {
    // I couldn't find any fixes for this issue for now.
    freeCompilerArgs += '-XXLanguage:-ProhibitJvmFieldOnOverrideFromInterfaceInPrimaryConstructor'
  }
}

task validateProtos(type: Exec) {
  mkdir bufDir
  commandLine("buf", "export", "--exclude-imports", "buf.build/envoyproxy/protoc-gen-validate", "-o", bufDir)
}

task gatewayProtos(type: Exec) {
  mkdir bufDir
  commandLine("buf", "export", "--exclude-imports", "buf.build/grpc-ecosystem/grpc-gateway", "-o", bufDir)
}

task authzedProtos(type: Exec) {
  dependsOn validateProtos
  dependsOn gatewayProtos
  commandLine("buf", "export", "--exclude-imports", "buf.build/authzed/api:${authzedProtoCommit}", "-o", bufDir)
}

protobuf {
  protoc { artifact = "com.google.protobuf:protoc:${protocVersion}${protocPlatformTag}" }
  plugins {
    grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}${protocPlatformTag}" }
    grpcKt { artifact = "io.grpc:protoc-gen-grpc-kotlin:${grpcKtVersion}:jdk8@jar" }
  }

  generateProtoTasks {
    ofSourceSet("main").each { task -> task.dependsOn authzedProtos }
    all()*.plugins {
      grpc {}
      grpcKt {}
    }
    all()*.builtins {
      kotlin {}
    }
  }
}

tasks.named("jar") { manifest {
  attributes("Implementation-Title": project.name,
             "Implementation-Version": project.version)
}}

sourceSets {
  intTest {
    compileClasspath += sourceSets.main.output
    runtimeClasspath += sourceSets.main.output
  }
}

configurations {
    intTestImplementation.extendsFrom implementation
    intTestRuntimeOnly.extendsFrom runtimeOnly
}

dependencies {
  intTestImplementation "junit:junit:4.13"
}

tasks.register('integrationTest', Test) {
    useJUnit()

    description = 'Runs integration tests.'
    group = 'verification'

    testClassesDirs = sourceSets.intTest.output.classesDirs
    classpath = sourceSets.intTest.runtimeClasspath
    shouldRunAfter test
}
